import asyncio
import random
import re
import json
import os
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram import types
from aiogram.fsm.state import default_state
from config import owners, admins, API_TOKEN
from games import (bet_multipliers, roulette_numbers, bet_aliases)
from games import RouletteState, CrashState,generate_crash_coef
from aiogram.filters import StateFilter
from keyboards import (
    work_kb,
    menu_kb,
    click_kb,
    games_kb,
    settings_kb,
    ref_kb,
    top_ref_kb,
    top_balance_kb,
    mining_kb,
    admin_kb,
    admin_set_kb,
    get_bank_action_kb,
    get_bank_main_kb,
    get_deposit_terms_kb,
    
)
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router
import time
from shop import router as shop_router
from shop import get_assets_text, SHOP_ITEMS, ASSET_EMOJIS
from texts import ( 
    roulette_help_text,
    transfer_help_text,
    miner_help_text,
    dvor_help_text,
    work_help_text,
    games_help_text,
    admin_panel_help_text,
    cladman_help_text,
    shop_help_text,
    assets_help_text,
    sell_help_text,
    bank_help_text,
    deposit_help_text,
    crash_help_text,
    all_commands_text,
    clicker_help_text,
    report_help_text,
    coin_help_text,
    bonus_help_text,
    top_help_text,
    profile_help_text,
    work_help_text,
)
from games import router as roulette_router
from config import admins
from aiogram.filters.command import CommandObject
from aiogram.types import CallbackQuery
import utils
from config import API_TOKEN, owners, bot
from utils import (
    load_user_data,
    save_user_data,
    get_user,
    get_balance,
    update_balance,
    set_name,
    get_name,
    get_game_id,
    parse_k,
    round_amount,
    fix_user_data,
    round_all_balances,
    round_balance,
    update_telegram_username,
    generate_work_keyboard,
    is_emoji_present,
    find_user_by_identifier,
    send_shop_items,
    check_and_pay_deposit,
    process_deposits,
    process_all_deposits,
    format_amount,
    safe_reply_kb,
    reset_user_data,
    clickable_name,
)


help_synonyms = {
    "—Ä—É–ª–µ—Ç–∫–∞": ["—Ä—É–ª–µ—Ç–∫–∞", "—Ä—É–ª–µ—Ç–∫–∏", "—Ä—É–ª–µ—Ç–∫—É", "—Ä—É–ª–µ—Ç–∫–µ", "—Ä—É–ª–µ—Ç–æ—á", "—Ä—É–ª–µ—Ç", "—Ä—É–ª–µ—Ç—É"],
    "–ø–µ—Ä–µ–¥–∞—Ç—å": ["–ø–µ—Ä–µ–¥–∞—Ç—å", "–ø–µ—Ä–µ–≤–æ–¥", "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏", "–ø–µ—Ä–µ–¥–∞—á–∏", "–ø–µ—Ä–µ–≤–æ–¥—ã"],
    "—Ä–∞–±–æ—Ç–∞": ["—Ä–∞–±–æ—Ç–∞", "—Ä–∞–±–æ—Ç—É", "—Ä–∞–±–æ—Ç—ã", "—Ä–∞–±–æ—Ç–µ", "—Ä–∞–±–æ—Ç–∞—Ç—å"],
    "—à–∞—Ö—Ç–µ—Ä": ["—à–∞—Ö—Ç–µ—Ä", "—à–∞—Ö—Ç—ë—Ä", "—à–∞—Ö—Ç–µ—Ä–∞", "—à–∞—Ö—Ç—ë—Ä–∞", "—à–∞—Ö—Ç–µ—Ä—É", "—à–∞—Ö—Ç—ë—Ä—É", "—à–∞—Ö—Ç–µ—Ä—ã", "—à–∞—Ö—Ç—ë—Ä—ã"],
    "–¥–≤–æ—Ä–Ω–∏–∫": ["–¥–≤–æ—Ä–Ω–∏–∫", "–¥–≤–æ—Ä–Ω–∏–∫–∞", "–¥–≤–æ—Ä–Ω–∏–∫—É", "–¥–≤–æ—Ä–Ω–∏–∫–∏"],
    "–∏–≥—Ä—ã": ["–∏–≥—Ä—ã", "–∏–≥—Ä–∞", "–∏–≥—Ä—É", "–∏–≥—Ä–µ", "–∏–≥—Ä", "–∏–≥—Ä—É–ª—å–∫–∏"],
    "–∫–ª–∞–¥–º–µ–Ω": ["–∫–ª–∞–¥–º–µ–Ω", "–∫–ª–∞–¥–º–µ–Ω–∞", "–∫–ª–∞–¥–º–µ–Ω—É", "–∫–ª–∞–¥", "–∫–ª–∞–¥—ã"],
    "–ø—Ä–æ–¥–∞—Ç—å": ["–ø—Ä–æ–¥–∞—Ç—å", "–ø—Ä–æ–¥–∞–∂–∏", "–ø—Ä–æ–¥–∞—Ç—å", "–ø—Ä–æ–¥–∞–ª", "–ø—Ä–æ–¥–∞–º"],
    "–º–∞–≥–∞–∑–∏–Ω": ["–º–∞–≥–∞–∑–∏–Ω", "–º–∞–≥–∞–∑–∏–Ω—É", "–º–∞–≥–∞–∑–∏–Ω–∞", "–º–∞–≥–∞–∑–∏–Ω–µ", "—à–æ–ø"],
    "–∏–º—É—â–µ—Å—Ç–≤–æ": ["–∏–º—É—â–µ—Å—Ç–≤–æ", "–∏–º—É—â–µ—Å—Ç–≤–∞", "–∏–º—É—â–µ—Å—Ç–≤—É", "–∏–º—É—â–µ—Å—Ç–≤–µ", "–∏–º"],
    "–±–∞–Ω–∫": ["–±–∞–Ω–∫", "–±–∞–Ω–∫–∞", "–±–∞–Ω–∫—É", "–±–∞–Ω–∫–µ", "–±–∞–Ω–∫–∏"],
    "–≤–∫–ª–∞–¥": ["–≤–∫–ª–∞–¥", "–≤–∫–ª–∞–¥—ã", "–≤–∫–ª–∞–¥—É", "–≤–∫–ª–∞–¥–∞", "–≤–∫–ª–∞–¥–∞—Ö"],
    "–∫—Ä–∞—à": ["–∫—Ä–∞—à", "–∫—Ä–∞—à–∞", "–∫—Ä–∞—à—É", "–∫—Ä–∞—à–µ", "–∫—Ä–∞—à–∏–∫", "crash"],
    "–∫–ª–∏–∫–µ—Ä": ["–∫–ª–∏–∫–µ—Ä", "–∫–ª–∏–∫–µ—Ä—É", "–∫–ª–∏–∫–µ—Ä–∞", "–∫–ª–∏–∫–µ—Ä–µ", "–∂–º–∞–∫", "–∂–º–∞–∫–µ—Ä", "–∫–ª–∏–∫", "clicker"],
    "—Ä–µ–ø–æ—Ä—Ç": ["—Ä–µ–ø–æ—Ä—Ç", "—Ä–µ–ø–æ—Ä—Ç–∞", "—Ä–µ–ø–æ—Ä—Ç—É", "—Ä–µ–ø–æ—Ä—Ç–µ", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "support"],
    "–º–æ–Ω–µ—Ç–∫–∞": ["–º–æ–Ω–µ—Ç–∫–∞", "–º–æ–Ω–µ—Ç–∫—É", "–º–æ–Ω–µ—Ç–∫–∏", "–º–æ–Ω–µ—Ç–∫–µ", "–º–æ–Ω–µ—Ç–æ—á–∫–∞", "–º–æ–Ω–µ—Ç–æ—á", "–º–æ–Ω–µ—Ç"],
    "–±–æ–Ω—É—Å": ["–±–æ–Ω—É—Å", "–±–æ–Ω—É—Å–∞", "–±–æ–Ω—É—Å—É", "–±–æ–Ω—É—Å—ã"],
    "—Ç–æ–ø": ["—Ç–æ–ø", "—Ç–æ–ø—ã", "—Ç–æ–ø—É", "—Ç–æ–ø–æ–≤", "—Ç–æ–ø–∞", "—Ç–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É", "—Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"],
    "–ø—Ä–æ—Ñ–∏–ª—å": ["–ø—Ä–æ—Ñ–∏–ª—å", "–ø—Ä–æ—Ñ–∏–ª—è", "–ø—Ä–æ—Ñ–∏–ª—é", "–ø—Ä–æ—Ñ–∏–ª–µ", "profile", "—è", "—è—à–∞"],
    "–Ω–∏–∫": ["–Ω–∏–∫", "–∏–º—è", "—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫", "—Å–º–µ–Ω–∏—Ç—å –∏–º—è", "–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è"],
    "–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å": ["–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å", "–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π", "–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–∞"],
    "help": ["help", "–∫–æ–º–∞–Ω–¥—ã", "–ø–æ–º–æ—â—å", "—Å–ø—Ä–∞–≤–∫–∞", "all commands"],
}



router = Router()
dp = Dispatcher(storage=MemoryStorage())
bets = {}
user_names = {}
game_ids = {}
user_data_file = os.path.join(os.path.dirname(__file__), "users.json")
last_bonus_time = {}
dp.include_router(roulette_router)
dp.include_router(shop_router)
available_topics = ["—Ä—É–ª–µ—Ç–∫–∞"]
BANK_DEPOSIT_LIMIT = 1_000_000
BOT_NAME = "GameBot"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
REPORTS_FILE = os.path.join(os.path.dirname(__file__), "reports.json")
REPORTS_STATE = {}


class SellState(StatesGroup):
    waiting_for_confirmation = State()

class AdminInfoState(StatesGroup):
    waiting_for_user_id = State()


class AdminGiveMoneyState(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_amount = State()

class BankDepositState(StatesGroup):
    waiting_for_deposit_amount = State()

class AdminSetState(StatesGroup):
    waiting_for_choice = State()
    waiting_for_user_id = State()
    waiting_for_value = State()
    waiting_for_confirmation = State()


class AdminResetState(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_confirmation = State()


class Reg(StatesGroup):
    waiting_for_name = State()


class SettingsState(StatesGroup):
    waiting_for_new_name = State()


class BankSaveState(StatesGroup):
    waiting_for_bank_save_add = State()
    waiting_for_bank_save_withdraw = State()
    

@dp.message(CommandStart())
async def send_welcome(message: Message, command: CommandObject, state: FSMContext):
    user_id = message.from_user.id
    tg_first_name = message.from_user.first_name
    username = message.from_user.username
    if username:
        update_telegram_username(user_id, username)
    args = command.args
    user = get_user(user_id)
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –∏–º–µ–Ω–∏ ‚Äî —Å—Ç–∞–≤–∏–º Telegram first_name
    if not user.get("name"):
        set_name(user_id, tg_first_name)
        user["name"] = tg_first_name
        save_user_data()
    if args and args.startswith("ref"):
        referrer_id = args[3:]
        if referrer_id.isdigit() and int(referrer_id) != user_id:
            referrer_id = int(referrer_id)
            referrer = get_user(referrer_id)
            if referrer:
                user["referrer"] = referrer_id
                referrer["referrals"].append(user_id)
                save_user_data()
                referrer_bonus = 10000
                update_balance(referrer_id, get_balance(referrer_id) + referrer_bonus)
                invited_bonus = 5000
                update_balance(user_id, get_balance(user_id) + invited_bonus)
                await message.answer(
                    f"üéâ –í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {clickable_name(referrer_id, referrer['name'])}!\n"
                    f"–û–Ω –ø–æ–ª—É—á–∏–ª <b>{referrer_bonus}$</b> –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –∞ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{invited_bonus}$</b>!",
                    reply_markup=safe_reply_kb(message, menu_kb),
                    parse_mode="HTML"
                )
    start_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="show_menu")]
        ]
    )
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {clickable_name(user_id, user.get('name', tg_first_name))}!\n"
        f"–≠—Ç–æ <b>{BOT_NAME}</b> ‚Äî —Ç–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å</b>, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.\n\n"
        f"–ï—Å–ª–∏ –ø—Ä–æ–ø–∞–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>–º–µ–Ω—é</code>",
        reply_markup=start_kb,
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "show_menu")
async def show_menu_callback(callback: CallbackQuery):
    await callback.message.edit_text("–ú–µ–Ω—é:", reply_markup=menu_kb)
    await callback.answer()




@dp.message(F.reply_to_message, F.text.lower().startswith("–ø–µ—Ä–µ–¥–∞—Ç—å"))
async def transfer_money_reply(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    reply = message.reply_to_message
    recipient_id = reply.from_user.id
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            f"‚ùå {clickable_name(user_id, name)}, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: <code>–ø–µ—Ä–µ–¥–∞—Ç—å 1000</code>",
            parse_mode="HTML"
        )
        return
    amount_text = parts[1].strip()
    sender_balance = get_balance(user_id)
    amount = sender_balance if amount_text.lower() == "–≤—Å–µ" else parse_k(amount_text)
    if amount is None or amount <= 0 or sender_balance < amount:
        await message.answer(
            f"‚ùå {clickable_name(user_id, name)}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.",
            parse_mode="HTML"
        )
        return
    recipient = get_user(recipient_id)
    if not recipient:
        await message.answer(
            f"‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—É—Å—Ç—å –æ–Ω –Ω–∞–ø–∏—à–µ—Ç –±–æ—Ç—É /start.",
            parse_mode="HTML"
        )
        return
    update_balance(user_id, sender_balance - amount)
    update_balance(recipient_id, get_balance(recipient_id) + amount)
    save_user_data()
    await message.answer(
        f"‚úÖ {clickable_name(user_id, name)} –ø–µ—Ä–µ–≤—ë–ª <b>{amount}$</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {clickable_name(recipient_id, recipient.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏'))}.",
        parse_mode="HTML"
    )
    try:
        await bot.send_message(
            recipient_id,
            f"üí∏ {clickable_name(user_id, name)} –ø–µ—Ä–µ–≤—ë–ª –≤–∞–º <b>{amount}$</b>!",
            parse_mode="HTML"
        )
    except Exception:
        pass
    
    

    
    
@dp.message(F.text.lower().in_(["–±–∞–ª–∞–Ω—Å", "–±–∞–ª–∏–∫", "üí∞ –±–∞–ª–∞–Ω—Å", 'balance', '–±']))
async def show_balance(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    balance = get_balance(user_id)
    await message.answer(
        f"üí∞ –ë–∞–ª–∞–Ω—Å {clickable_name(user_id, name)}: <b>{format_amount(balance)}$</b>",
        parse_mode="HTML"
    )


@dp.message(F.text.lower().in_(["üéÅ –±–æ–Ω—É—Å", "–±–æ–Ω—É—Å"]))
async def bonus_command(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    current_time = time.time()
    last_bonus_time = user.get("last_bonus_time", 0)
    elapsed_time = current_time - last_bonus_time
    if elapsed_time < 3600:
        remaining_time = int((3600 - elapsed_time) / 60)
        await message.answer(
            f"‚ùå {clickable_name(user_id, name)}, –≤—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ <b>{remaining_time}</b> –º–∏–Ω.",
            parse_mode="HTML"
        )
        return
    bonus_amount = 1000
    update_balance(user_id, get_balance(user_id) + bonus_amount)
    user["last_bonus_time"] = current_time
    save_user_data()
    await message.answer(
        f"üéâ {clickable_name(user_id, name)}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: <b>{bonus_amount}$</b>!\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{format_amount(get_balance(user_id))}$</b>",
        parse_mode="HTML"
    )

@dp.message(F.text.lower().in_(["—Ä–µ—Ñ", "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "—Ä–µ—Ñ–∫–∞", "/ref", "üîó —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"]))
async def send_referral_link(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    referral_link = f"https://t.me/{bot_username}?start=ref{user_id}"
    if message.chat.type == "private":
        await message.answer(
            f"üîó {clickable_name(user_id, name, clickable)} –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
            "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ!",
            reply_markup=safe_reply_kb(message, ref_kb),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            f"üîó {clickable_name(user_id, name, clickable)} –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
            "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ!\n\n"
            "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
            parse_mode="HTML"
        )


@dp.message(F.text.lower().startswith("–ø–æ–º–æ—â—å"))
async def help_command(message: Message):
    text = message.text.lower().replace("—ë", "–µ").split()
    user = get_user(message.from_user.id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    if len(text) < 2:
        await message.answer(
            f"‚ùì {clickable_name(message.from_user.id, name, clickable)}, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
            "üìå <b>–ü—Ä–∏–º–µ—Ä:</b> <code>–ø–æ–º–æ—â—å —Ä—É–ª–µ—Ç–∫–∞</code>\n"
            "üìã –î–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥: <code>–∫–æ–º–∞–Ω–¥—ã</code>\n\n"
            "üí° –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –±–∞–≥ –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ <b>—Ä–µ–ø–æ—Ä—Ç</b> –∏–ª–∏ <b>–ø–æ–¥–¥–µ—Ä–∂–∫–∞</b> –∏ –≤–∞—à —Ç–µ–∫—Å—Ç.\n"
            "‚úâÔ∏è –ü—Ä–∏–º–µ—Ä: <code>—Ä–µ–ø–æ—Ä—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–∞–Ω–∫</code>",
            parse_mode="HTML",
        )
        return

    topic = text[1]
    # –ü–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º
    found_key = None
    for key, synonyms in help_synonyms.items():
        if topic in synonyms:
            found_key = key
            break

    help_texts = {
        "—Ä—É–ª–µ—Ç–∫–∞": roulette_help_text,
        "–ø–µ—Ä–µ–¥–∞—Ç—å": transfer_help_text,
        "—Ä–∞–±–æ—Ç–∞": work_help_text,
        "—à–∞—Ö—Ç–µ—Ä": miner_help_text,
        "–¥–≤–æ—Ä–Ω–∏–∫": dvor_help_text,
        "–∏–≥—Ä—ã": games_help_text,
        "–∫–ª–∞–¥–º–µ–Ω": cladman_help_text,
        "–ø—Ä–æ–¥–∞—Ç—å": sell_help_text,
        "–º–∞–≥–∞–∑–∏–Ω": shop_help_text,
        "–∏–º—É—â–µ—Å—Ç–≤–æ": assets_help_text,
        "–±–∞–Ω–∫": bank_help_text,
        "–≤–∫–ª–∞–¥": deposit_help_text,
        "–∫—Ä–∞—à": crash_help_text,
        "–∫–ª–∏–∫–µ—Ä": clicker_help_text,
        "—Ä–µ–ø–æ—Ä—Ç": report_help_text,
        "–º–æ–Ω–µ—Ç–∫–∞": coin_help_text,
        "–±–æ–Ω—É—Å": bonus_help_text,
        "—Ç–æ–ø": top_help_text,
        "–ø—Ä–æ—Ñ–∏–ª—å": profile_help_text,
        "–Ω–∏–∫": profile_help_text,
        "–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å": profile_help_text,
        "help": all_commands_text,
    }

    if found_key and found_key in help_texts:
        await message.answer(help_texts[found_key], parse_mode="HTML")
    else:
        await message.answer(
            f"‚ùå {clickable_name(message.from_user.id, name, clickable)}, –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ–º–µ: {topic}\n"
            "–î–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>–∫–æ–º–∞–Ω–¥—ã</code>.",
            parse_mode="HTML"
        )


@dp.message(F.text.lower().in_(["–∫–æ–º–∞–Ω–¥—ã", "—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", "all commands"]))
async def all_commands_handler(message: Message):
    await message.answer(all_commands_text, parse_mode="HTML")


@dp.message(F.text.lower().in_(["‚úèÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è", "–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è"]))
async def change_name_prompt(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(SettingsState.waiting_for_new_name)


@dp.message(
    F.text.lower().in_(["—Ä–µ—Ñ–µ—Ä–∞–ª—ã", "–º–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", "/referrals", "üë• —Ä–µ—Ñ–µ—Ä–∞–ª—ã"])
)
async def show_referrals(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    referrals = user.get("referrals", [])
    if not referrals:
        await message.answer(
            f"‚ùå {clickable_name(user_id, name)}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            parse_mode="HTML"
        )
        return

    referral_list = ""
    for i, ref in enumerate(referrals):
        ref_user = get_user(ref)
        if not ref_user:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        ref_name = ref_user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        referral_list += f"{i + 1}. {clickable_name(ref, ref_name)} ‚Äî {get_balance(ref)}$\n"

    if not referral_list:
        referral_list = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    await message.answer(
        f"üë• {clickable_name(user_id, name)}, –≤–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n{referral_list}",
        reply_markup=safe_reply_kb(message, menu_kb),
        parse_mode="HTML"
    )


@dp.message(SettingsState.waiting_for_new_name)
async def process_new_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    new_name = message.text.strip()
    user = get_user(message.from_user.id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    if len(new_name) > 30:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    set_name(user_id, new_name)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∏–º—è
    await message.answer(f"‚úÖ –í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}", reply_markup=safe_reply_kb(message, menu_kb))
    await state.clear()


@dp.message(F.text.lower().in_(["—Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", "—Ç–æ–ø —Ä–µ—Ñ"]))
async def show_top_referrals(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏") if user else "–ë–µ–∑ –∏–º–µ–Ω–∏"
    clickable = user.get("clickable_name", True) if user else True
    sorted_users = sorted(
        utils.user_data.items(),
        key=lambda x: len(x[1].get("referrals", [])),
        reverse=True,
    )
    top_users = sorted_users[:10]
    all_ids = [uid for uid, _ in sorted_users]

    if not top_users:
        top_text = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö."
    else:
        top_text = f"üèÜ <b>{clickable_name(user_id, name, clickable)}</b>:\n<b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>\n\n"
        for i, (uid, data) in enumerate(top_users, start=1):
            uname = data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            top_clickable = data.get("clickable_name", True)
            referrals_count = len(data.get("referrals", []))
            top_text += f"{i}. {clickable_name(uid, uname, top_clickable)} ‚Äî {referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
        if user_id not in [uid for uid, _ in top_users]:
            place = all_ids.index(user_id) + 1 if user_id in all_ids else None
            if place:
                top_text += f"\n–í–∞—à–µ –º–µ—Å—Ç–æ: {place} –∏–∑ {len(all_ids)}"

    await message.answer(top_text, parse_mode="HTML", reply_markup=top_ref_kb)


@dp.message(F.text.lower().in_(["—Ç–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É", "—Ç–æ–ø –±–∞–ª–∏–∫"]))
async def show_top_rich(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    sorted_users = sorted(
        utils.user_data.items(),
        key=lambda x: x[1].get("balance", 0),
        reverse=True,
    )
    top_users = sorted_users[:10]
    all_ids = [uid for uid, _ in sorted_users]

    if not top_users:
        top_text = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö."
    else:
        top_text = "<b>üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n\n"
        for i, (uid, data) in enumerate(top_users, start=1):
            uname = data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            balance = data.get("balance", 0)
            top_text += f"{i}. {clickable_name(uid, uname, data.get('clickable_name', True))} ‚Äî {format_amount(balance)}$\n"
        if user_id not in [uid for uid, _ in top_users]:
            place = all_ids.index(user_id) + 1 if user_id in all_ids else None
            if place:
                top_text += f"\n–í–∞—à–µ –º–µ—Å—Ç–æ: {place} –∏–∑ {len(all_ids)}"

    await message.answer(top_text, parse_mode="HTML", reply_markup=top_balance_kb)




@dp.message(F.text.lower() == "–∂–æ–ø–∞")
async def handle_caczka_command(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ñ–æ–ø–∞", callback_data="–∂–æ–ø–∞")]
        ]
    )
    await message.answer("„Ö§", reply_markup=keyboard)

@dp.callback_query(F.data == "–∂–æ–ø–∞")
async def handle_caczka_callback(callback: CallbackQuery):
    await callback.answer("„Ö§\n„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§–ñ–æ–ø–∞", show_alert=True)


@dp.message(F.text.lower().in_(["üèÜ —Ç–æ–ø", "—Ç–æ–ø"]))
async def show_top(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    # –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî fallback –Ω–∞ Telegram first_name
    name = user.get("name") if user and user.get("name") else message.from_user.first_name
    clickable = user.get("clickable_name", True) if user else True

    text = message.text.lower()
    if "—Ä–µ—Ñ" in text or "–ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º" in text:
        await show_top_referrals(message)
    else:
        # –ü–µ—Ä–µ–¥–∞—ë–º –∏–º—è –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —è–≤–Ω–æ
        await show_top_rich(message, name, clickable)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π show_top_rich —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –∏–º–µ–Ω–∏ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
async def show_top_rich(message: Message, name=None, clickable=True):
    user_id = message.from_user.id
    if name is None or clickable is None:
        user = get_user(user_id)
        name = user.get("name") if user and user.get("name") else message.from_user.first_name
        clickable = user.get("clickable_name", True) if user else True
    sorted_users = sorted(
        utils.user_data.items(),
        key=lambda x: x[1].get("balance", 0),
        reverse=True,
    )
    top_users = sorted_users[:10]
    all_ids = [uid for uid, _ in sorted_users]

    if not top_users:
        top_text = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö."
    else:
        top_text = f"<b>üèÜ {clickable_name(user_id, name, clickable)}</b>:\n<b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n\n"
        for i, (uid, data) in enumerate(top_users, start=1):
            uname = data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            top_clickable = data.get("clickable_name", True)
            balance = data.get("balance", 0)
            top_text += f"{i}. {clickable_name(uid, uname, top_clickable)} ‚Äî {format_amount(balance)}$\n"
        if user_id not in [uid for uid, _ in top_users]:
            place = all_ids.index(user_id) + 1 if user_id in all_ids else None
            if place:
                top_text += f"\n–í–∞—à–µ –º–µ—Å—Ç–æ: {place} –∏–∑ {len(all_ids)}"

    await message.answer(top_text, parse_mode="HTML", reply_markup=top_balance_kb)


@dp.callback_query(F.data == "top_balance")
async def show_top_balance_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    name = user.get("name") if user and user.get("name") else callback.from_user.first_name
    clickable = user.get("clickable_name", True) if user else True
    sorted_users = sorted(
        utils.user_data.items(),
        key=lambda x: x[1].get("balance", 0),
        reverse=True,
    )
    top_users = sorted_users[:10]
    all_ids = [int(uid) for uid, _ in sorted_users]

    if not top_users:
        top_text = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö."
    else:
        top_text = f"<b>üèÜ {clickable_name(user_id, name, clickable)}</b>:\n<b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n\n"
        for i, (uid, data) in enumerate(top_users, start=1):
            uname = data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            top_clickable = data.get("clickable_name", True)
            balance = data.get("balance", 0)
            top_text += f"{i}. {clickable_name(int(uid), uname, top_clickable)} ‚Äî {format_amount(balance)}$\n"
        if user_id not in [int(uid) for uid, _ in top_users]:
            place = all_ids.index(user_id) + 1 if user_id in all_ids else None
            if place:
                top_text += f"\n–í–∞—à–µ –º–µ—Å—Ç–æ: {place} –∏–∑ {len(all_ids)}"

    await callback.message.edit_text(top_text, parse_mode="HTML", reply_markup=top_balance_kb)
    await callback.answer()

@dp.callback_query(F.data == "top_ref")
async def show_top_ref_callback(callback: CallbackQuery):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –∏ –≤—ã—à–µ, —Ç–æ–ª—å–∫–æ –¥–ª—è callback.message
    user_id = callback.from_user.id
    user = get_user(user_id)
    name = user.get("name") if user and user.get("name") else callback.from_user.first_name
    clickable = user.get("clickable_name", True) if user else True
    sorted_users = sorted(
        utils.user_data.items(),
        key=lambda x: len(x[1].get("referrals", [])),
        reverse=True,
    )
    top_users = sorted_users[:10]
    all_ids = [int(uid) for uid, _ in sorted_users]

    if not top_users:
        top_text = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö."
    else:
        top_text = f"üèÜ <b>{clickable_name(user_id, name, clickable)}</b>:\n<b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>\n\n"
        for i, (uid, data) in enumerate(top_users, start=1):
            uname = data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            top_clickable = data.get("clickable_name", True)
            referrals_count = len(data.get("referrals", []))
            top_text += f"{i}. {clickable_name(int(uid), uname, top_clickable)} ‚Äî {referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
        if user_id not in [int(uid) for uid, _ in top_users]:
            place = all_ids.index(user_id) + 1 if user_id in all_ids else None
            if place:
                top_text += f"\n–í–∞—à–µ –º–µ—Å—Ç–æ: {place} –∏–∑ {len(all_ids)}"

    await callback.message.edit_text(top_text, parse_mode="HTML", reply_markup=top_ref_kb)
    await callback.answer()



@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu_callback(callback: CallbackQuery):
    await callback.message.answer("–ú–µ–Ω—é:", reply_markup=safe_reply_kb(callback.message, menu_kb))
    await callback.answer()

@dp.message(F.text.lower().in_(["üîó –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–∞", "–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–∞"]))
async def toggle_clickable_name(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
    user["clickable_name"] = not user.get("clickable_name", True)
    save_user_data()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if user["clickable_name"]:
        await message.answer(
            "‚úÖ –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.", reply_markup=safe_reply_kb(message, settings_kb)
        )
    else:
        await message.answer(
            "‚ùå –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.", reply_markup=safe_reply_kb(message, settings_kb)
        )
        

@dp.message(F.text.lower().in_(["–ñ–º–∞–∫", "–∂–º–∞–∫", "–∂–º—è–∫", "–∫–ª–∏–∫", "üëÜ –∂–º–∞–∫"]))
async def click(message: Message):
    user_id = message.from_user.id
    balance = get_balance(user_id) + 1
    update_balance(user_id, balance)
    await message.answer("+1$", reply_markup=safe_reply_kb(message, click_kb))


@dp.message(F.text.lower().in_(["–∫–ª–∏–∫–µ—Ä", "clicker", "–∂–º–∞–∫–µ—Ä", "üëÜ –∂–º–∞–∫–µ—Ä"]))
async def show_clicker(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    await message.answer(
        f"üéÆ –ö–ª–∏–∫–µ—Ä –¥–ª—è {clickable_name(user_id, name, clickable)}:\n"
        "üëÜ –ñ–º–∞–∫–∞–π <code>–∂–º–∞–∫</code> —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å +1$ –∫ –±–∞–ª–∞–Ω—Å—É\n"
        "üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å: <code>–±–∞–ª–∞–Ω—Å</code>",
        parse_mode="HTML",
        reply_markup=safe_reply_kb(message, click_kb),
    )
    
    
    
@dp.message(F.text.lower().in_(["üé∞ —Ä—É–ª–µ—Ç–∫–∞", "—Ä—É–ª–µ—Ç–∫–∞"]))
async def roulette_instruction(message: Message):
    user = get_user(message.from_user.id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    await message.answer(
        f"üé∞ {clickable_name(message.from_user.id, name, clickable)} ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä—É–ª–µ—Ç–∫–µ:\n"
        "–ù–∞–ø–∏—à–∏: <code>—Ä—É–ª–µ—Ç–∫–∞ [—Ç–∏–ø —Å—Ç–∞–≤–∫–∏] [—Å—É–º–º–∞]</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>—Ä—É–ª–µ—Ç–∫–∞ –∫—Ä–∞—Å–Ω–æ–µ 1000</code>\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: <code>–ø–æ–º–æ—â—å —Ä—É–ª–µ—Ç–∫–∞</code>",
        parse_mode="HTML"
    )
    

@dp.message(F.text.lower().in_(["üí• –∫—Ä–∞—à", "–∫—Ä–∞—à"]))
async def crash_instruction(message: Message):
    user = get_user(message.from_user.id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    await message.answer(
        f"üí• {clickable_name(message.from_user.id, name, clickable)} ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∫—Ä–∞—à—É:\n"
        "–ù–∞–ø–∏—à–∏: <code>–∫—Ä–∞—à [–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç] [—Å—É–º–º–∞]</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–∫—Ä–∞—à 2.5 1000</code>\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: <code>–ø–æ–º–æ—â—å –∫—Ä–∞—à</code>",
        parse_mode="HTML"
    )


@dp.message(F.text.lower().in_(["profile", "–ø—Ä–æ—Ñ–∏–ª—å", "–ø—Ä–æ—Ñ", "—è", "z", "üë§ –ø—Ä–æ—Ñ–∏–ª—å"]))
async def show_profile(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    if username:
        update_telegram_username(user_id, username)
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    game_id = user.get("game_id", "–ù–µ —É–∫–∞–∑–∞–Ω")
    balance = get_balance(user_id)

    profile_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ò–º—É—â–µ—Å—Ç–≤–æ", callback_data="show_assets_from_profile")]
        ]
    )

    await message.answer(
        f"{clickable_name(user_id, name, clickable)},\n"
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {name}\n"
        f"üÜî: <code>{game_id}</code>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(balance)}$",
        reply_markup=profile_kb,
        parse_mode="HTML",
    )
    
    
@dp.callback_query(F.data == "show_assets_from_profile")
async def show_assets_from_profile_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    assets_text = get_assets_text(user)
    sell_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ –ü—Ä–æ–¥–∞—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ", callback_data="sell_assets")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")],
        ]
    )
    await callback.message.edit_text(
        f"üì¶ {clickable_name(user_id, name, clickable)} –≤–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ:\n{assets_text}",
        reply_markup=sell_kb,
        parse_mode="HTML"
    )
    await callback.answer()


@dp.callback_query(F.data == "show_assets")
async def show_assets_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    assets_text = get_assets_text(user)
    sell_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ –ü—Ä–æ–¥–∞—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ", callback_data="sell_assets")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")],
        ]
    )
    await callback.message.edit_text(
        f"üì¶ {clickable_name(user_id, name, clickable)} –≤–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ:\n{assets_text}",
        reply_markup=sell_kb,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_profile")
async def back_to_profile_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username
    update_telegram_username(user_id, username)
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    game_id = user.get("game_id", "–ù–µ —É–∫–∞–∑–∞–Ω")
    balance = get_balance(user_id)

    profile_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ò–º—É—â–µ—Å—Ç–≤–æ", callback_data="show_assets_from_profile")]
        ]
    )

    await callback.message.edit_text(
        f"{clickable_name(user_id, name, clickable)},\n"
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {name}\n"
        f"üÜî: <code>{game_id}</code>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}$",
        reply_markup=profile_kb,
        parse_mode="HTML",
    )
    await callback.answer()

@dp.callback_query(F.data == "sell_assets")
async def sell_assets_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    assets = []
    for cat in SHOP_ITEMS.keys():
        item = user.get(cat)
        if item:
            emoji = ASSET_EMOJIS.get(cat, "")
            assets.append((cat, item, emoji))
    if not assets:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.", show_alert=True)
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    sell_buttons = [
        [InlineKeyboardButton(text=f"{emoji} {item}", callback_data=f"sell_{cat}")]
        for cat, item, emoji in assets
    ]
    sell_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_assets")])
    kb = InlineKeyboardMarkup(inline_keyboard=sell_buttons)
    await callback.message.edit_text(
        f"{clickable_name(user_id, name, clickable)}, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("sell_"))
async def confirm_sell_asset(callback: CallbackQuery):
    user_id = callback.from_user.id
    cat = callback.data.replace("sell_", "")
    user = get_user(user_id)
    item_name = user.get(cat)
    if not item_name:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞.", show_alert=True)
        return
    price = next((item["price"] for item in SHOP_ITEMS[cat] if item["name"] == item_name), None)
    if not price:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ.", show_alert=True)
        return
    sell_price = int(price * 0.6)
    update_balance(user_id, get_balance(user_id) + sell_price)
    user[cat] = None
    save_user_data()
    await callback.message.edit_text(
        f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {item_name} –∑–∞ {sell_price}$!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_assets")],
            ]
        ),
        parse_mode="HTML"
    )



@dp.message(
    F.text.lower().in_(["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "settings", "/settings", "/setting", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"])
)
async def show_settings(message: Message):
    if message.chat.type == "private":
        await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=safe_reply_kb(message, settings_kb)
        )
    else:
        await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")


@dp.message(F.text.lower().in_(["menu", "–º–µ–Ω—é", "–º–µ–Ω—é—à–∫–∞", "/menu", "üè† –º–µ–Ω—é", '–º', 'm']))
async def show_menu(message: Message):
    if message.chat.type == "private":
        await message.answer("–ú–µ–Ω—é:", reply_markup=safe_reply_kb(message, menu_kb))
    else:
        await message.answer("–ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")


@dp.message(F.text.lower().in_(["–∏–≥—Ä—ã", "games", "–∏–≥—Ä—É–ª—å–∫–∏", "üéÆ –∏–≥—Ä—ã"]))
async def show_games(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    games_text = (
        f"üéÆ {clickable_name(user_id, name, clickable)}, –≤–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:\n\n"
        "‚Ä¢ üé∞ <b>–†—É–ª–µ—Ç–∫–∞</b> ‚Äî —É–≥–∞–¥–∞–π —Ü–≤–µ—Ç –∏–ª–∏ —á–∏—Å–ª–æ –∏ –≤—ã–∏–≥—Ä–∞–π!\n"
        "   –ü—Ä–∏–º–µ—Ä: <code>—Ä—É–ª–µ—Ç–∫–∞ –∫—Ä–∞—Å–Ω–æ–µ 1000</code>\n"
        "‚Ä¢ üí• <b>–ö—Ä–∞—à</b> ‚Äî —É–≥–∞–¥–∞–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏ –∑–∞–±–µ—Ä–∏ –≤—ã–∏–≥—Ä—ã—à!\n"
        "   –ü—Ä–∏–º–µ—Ä: <code>–∫—Ä–∞—à 2.5 1000</code>\n"
        "‚Ä¢ ü™ô <b>–ú–æ–Ω–µ—Ç–∫–∞</b> ‚Äî –±—Ä–æ—Å—å –≤—ã–∑–æ–≤: –≤—ã–±–µ—Ä–∏ –æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞, –ø–æ—Å—Ç–∞–≤—å —Å—É–º–º—É –∏ –∂–¥–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!\n"
        "   –ü—Ä–∏–º–µ—Ä: <code>–º–æ–Ω–µ—Ç–∫–∞ –æ—Ä–µ–ª 1000</code>\n"
        "‚Ä¢ üëÜ <b>–ö–ª–∏–∫–µ—Ä</b> ‚Äî –∂–º–∏ <code>–∂–º–∞–∫</code> –∏ –ø–æ–ª—É—á–∞–π –¥–µ–Ω—å–≥–∏!\n"
        "‚Ä¢ üíº <b>–†–∞–±–æ—Ç–∞</b> ‚Äî –≤—ã–±–µ—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π!\n"
        "‚Ä¢ üì¶ <b>–ò–º—É—â–µ—Å—Ç–≤–æ</b> ‚Äî –ø–æ–∫—É–ø–∞–π –∏ –ø—Ä–æ–¥–∞–≤–∞–π –∞–∫—Ç–∏–≤—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.\n"
        "\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–≥—Ä–µ –Ω–∞–ø–∏—à–∏ <code>–ø–æ–º–æ—â—å [–∏–≥—Ä–∞]</code>.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ø–æ–º–æ—â—å –º–æ–Ω–µ—Ç–∫–∞</code>"
    )
    if message.chat.type == "private":
        await message.answer(
            games_text,
            parse_mode="HTML",
            reply_markup=safe_reply_kb(message, games_kb),
        )
    else:
        await message.answer(
            f"üéÆ {clickable_name(user_id, name, clickable)}, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
            parse_mode="HTML"
        )
        
        
@dp.message(F.text.lower().in_(["ü™ô –º–æ–Ω–µ—Ç–∫–∞"]))
async def coin_game_instruction(message: Message):
    await message.answer(
        "ü™ô <b>–ú–æ–Ω–µ—Ç–∫–∞</b> ‚Äî –∏–≥—Ä–∞ –Ω–∞ —É–¥–∞—á—É –º–µ–∂–¥—É –¥–≤—É–º—è –∏–≥—Ä–æ–∫–∞–º–∏!\n\n"
        "1. –°–æ–∑–¥–∞–π –∏–≥—Ä—É: <code>–º–æ–Ω–µ—Ç–∫–∞ –æ—Ä–µ–ª 1000</code> –∏–ª–∏ <code>–º–æ–Ω–µ—Ç–∫–∞ —Ä–µ—à–∫–∞ –≤—Å–µ</code>\n"
        "2. –ñ–¥–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å <code>–º–æ–Ω–µ—Ç–∫–∞</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä\n"
        "3. –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–≥—Ä—É: <code>–º–æ–Ω–µ—Ç–∫–∞ 1</code> (–≥–¥–µ 1 ‚Äî –Ω–æ–º–µ—Ä –∏–≥—Ä—ã)\n\n"
        "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ. –ï—Å–ª–∏ —É–≥–∞–¥–∞–µ—à—å —Å—Ç–æ—Ä–æ–Ω—É ‚Äî –ø–æ–ª—É—á–∏—à—å —É–¥–≤–æ–µ–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É!",
        parse_mode="HTML"
    )
        


@dp.message(F.text.lower().startswith("–Ω–∏–∫"))
async def change_name_command(message: Message):
    user_id = message.from_user.id
    parts = message.text.split(maxsplit=1)

    if len(parts) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è. –ü—Ä–∏–º–µ—Ä: <code>–Ω–∏–∫ –ò–≤–∞–Ω</code>", parse_mode="HTML"
        )
        return

    new_name = parts[1].strip()

    if len(new_name) > 30:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    set_name(user_id, new_name)
    await message.answer(f"‚úÖ –í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}", reply_markup=safe_reply_kb(message, menu_kb))
    


@dp.message(F.text.lower().in_(["üíº —Ä–∞–±–æ—Ç–∞", "—Ä–∞–±–æ—Ç–∞", '—Ä–∞–±–æ—Ç—ã']))
async def start_work(message: Message):
    user = get_user(message.from_user.id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    text = (
        f"üíº {clickable_name(message.from_user.id, name, clickable)}, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:\n\n"
        "üßπ –î–≤–æ—Ä–Ω–∏–∫ ‚Äî —É–±–∏—Ä–∞–π—Ç–µ –º—É—Å–æ—Ä –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏!\n"
        "‚õèÔ∏è –®–∞—Ö—Ç—ë—Ä ‚Äî –¥–æ–±—ã–≤–∞–π—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏!\n"
        "üí∞ –ö–ª–∞–¥–º–µ–Ω ‚Äî –∏—â–∏—Ç–µ –∫–ª–∞–¥—ã –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –∏—Ö!"
    )
    await message.answer(text, reply_markup=work_kb, parse_mode="HTML")



@dp.message(F.text.lower().in_(["‚ùì –ø–æ–º–æ—â—å"]))
async def help_short(message: Message):
    user = get_user(message.from_user.id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    await message.answer(
        f"‚ùì {clickable_name(message.from_user.id, name, clickable)}, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>–ø–æ–º–æ—â—å —Ä—É–ª–µ—Ç–∫–∞</code>\n"
        "–î–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>–∫–æ–º–∞–Ω–¥—ã</code>.\n"
        "–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
        "–ö–æ–º–∞–Ω–¥–∞: –†–µ–ø–æ—Ä—Ç (—Å–æ–æ–±—â–µ–Ω–∏–µ)\n",
        parse_mode="HTML",
    )


@dp.message(F.text.lower().in_(["–∫–ª–∞–¥–º–µ–Ω", "–∫–ª–∞–¥", "üí∞ –∫–ª–∞–¥–º–µ–Ω"]))
async def start_cladman_work(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    keyboard, available_emojis = generate_cladman_keyboard()
    user["available_emojis"] = available_emojis
    user["current_work"] = "cladman"
    save_user_data()
    if message.chat.type == "private":
        await message.answer(
            f"üí∞ {clickable_name(user_id, name, clickable)}, –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É –∫–ª–∞–¥–º–µ–Ω–æ–º!\n\n"
            "–ù–∞–π–¥–∏—Ç–µ –∫–ª–∞–¥ –∏ –ø—Ä–æ–¥–∞–π—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–∏–Ω –∏–∑ —Å–º–∞–π–ª–∏–∫–æ–≤ –Ω–∏–∂–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await message.answer(
            f"üí∞ {clickable_name(user_id, name, clickable)}, –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É –∫–ª–∞–¥–º–µ–Ω–æ–º!\n\n"
            "–ù–∞–π–¥–∏—Ç–µ –∫–ª–∞–¥ –∏ –ø—Ä–æ–¥–∞–π—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏. (–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º!)",
            parse_mode="HTML"
        )


@dp.message(F.text.in_(["üíé", "üìø", "ü™ô", "ü™µ", "ü™û", "ü™∂", "ü™î", "ü™Ñ", "ü™ì", "ü™§"]))
async def handle_cladman_choice(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–±–æ—Ç–µ –∫–ª–∞–¥–º–µ–Ω–æ–º
    if user.get("current_work") != "cladman":
        await message.answer("‚ùå –≠—Ç–æ—Ç —Å–º–∞–π–ª–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–ª–∞–¥–º–µ–Ω–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ `–∫–ª–∞–¥–º–µ–Ω`, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏
    available_emojis = user.get("available_emojis", [])
    if not available_emojis:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞–¥–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ `–∫–ª–∞–¥–º–µ–Ω`, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.")
        return

    choice = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Å–º–∞–π–ª–∏–∫ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    if choice not in available_emojis:
        await message.answer("‚ùå –≠—Ç–æ—Ç –∫–ª–∞–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–º–∞–π–ª–∏–∫–∞
    item_values = {
        "üíé": 100,
        "üìø": 50,
        "ü™ô": 10,
        "ü™µ": 5,
        "ü™û": 20,
        "ü™∂": 15,
        "ü™î": 30,
        "ü™Ñ": 40,
        "ü™ì": 25,
        "ü™§": 35,
    }
    reward = item_values.get(choice, 0)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = get_balance(user_id) + reward
    update_balance(user_id, balance)

    await message.answer(
        f"‚úÖ –í—ã –ø—Ä–æ–¥–∞–ª–∏ {choice} –∑–∞ {reward}$!\n"
        f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}$",
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard, available_emojis = generate_cladman_keyboard()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏
    user["available_emojis"] = available_emojis
    save_user_data()

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª–∞–¥:",
        reply_markup=keyboard,
    )


def generate_cladman_keyboard():
    items = [
        {"emoji": "üíé", "value": 100, "probability": 5},  # –û—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç
        {"emoji": "üìø", "value": 50, "probability": 10},  # –î–æ—Ä–æ–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç
        {"emoji": "ü™ô", "value": 10, "probability": 30},  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç
        {"emoji": "ü™µ", "value": 5, "probability": 40},   # –î–µ—à–µ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
        {"emoji": "ü™û", "value": 20, "probability": 15},  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç
        {"emoji": "ü™∂", "value": 15, "probability": 20},  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç
        {"emoji": "ü™î", "value": 30, "probability": 10},  # –î–æ—Ä–æ–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç
        {"emoji": "ü™Ñ", "value": 40, "probability": 8},   # –î–æ—Ä–æ–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç
        {"emoji": "ü™ì", "value": 25, "probability": 12},  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç
        {"emoji": "ü™§", "value": 35, "probability": 7},   # –î–æ—Ä–æ–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç
    ]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–º–∞–π–ª–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    emojis = random.choices(
        [item["emoji"] for item in items],
        weights=[item["probability"] for item in items],
        k=10,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (2 —Ä—è–¥–∞ –ø–æ 5 –∫–Ω–æ–ø–æ–∫)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=emojis[i]) for i in range(5)],
            [KeyboardButton(text=emojis[i]) for i in range(5, 10)],
        ],
        resize_keyboard=True,
    )

    return keyboard, emojis




@dp.message(F.text.lower().in_(["üßπ –¥–≤–æ—Ä–Ω–∏–∫", "–¥–≤–æ—Ä–Ω–∏–∫"]))
async def start_dvor_work(message: Message):
    correct_emoji = random.choice(["üóëÔ∏è", "‚ôªÔ∏è", "üßπ", "üöÆ", "ü™†", "üßº"])
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    user["correct_emoji"] = correct_emoji
    user["current_work"] = "dvor"
    save_user_data()
    if message.chat.type == "private":
        await message.answer(
            f"üßπ {clickable_name(user_id, name, clickable)}, –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É –¥–≤–æ—Ä–Ω–∏–∫–æ–º!\n\n"
            f"–ù–∞–π–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–º–∞–π–ª–∏–∫: {correct_emoji}",
            reply_markup=generate_work_keyboard(correct_emoji),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            f"üßπ {clickable_name(user_id, name, clickable)}, –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É –¥–≤–æ—Ä–Ω–∏–∫–æ–º!\n\n"
            f"(–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º!)",
            parse_mode="HTML"
        )


@dp.message(F.text.in_(["üóëÔ∏è", "‚ôªÔ∏è", "üßπ", "üöÆ", "ü™†", "üßº"]))
async def handle_work_choice(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–±–æ—Ç–µ –¥–≤–æ—Ä–Ω–∏–∫–æ–º
    if user.get("current_work") != "dvor":
        await message.answer("‚ùå –≠—Ç–æ—Ç —Å–º–∞–π–ª–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –¥–≤–æ—Ä–Ω–∏–∫–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ `–¥–≤–æ—Ä–Ω–∏–∫`, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–º–∞–π–ª–∏–∫
    correct_emoji = user.get("correct_emoji")
    if not correct_emoji:
        return  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    choice = message.text.strip()

    if choice == correct_emoji:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = get_balance(user_id) + 50
        update_balance(user_id, balance)
        await message.answer(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–º–∞–π–ª–∏–∫ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 50$!\n"
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}$",
        )
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
        correct_emoji = random.choice(["üóëÔ∏è", "‚ôªÔ∏è", "üßπ", "üöÆ", "ü™†", "üßº"])
        user["correct_emoji"] = correct_emoji
        save_user_data()
        await message.answer(
            f"–ù–∞–π–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–º–∞–π–ª–∏–∫: {correct_emoji}",
            reply_markup=generate_work_keyboard(correct_emoji),
        )
    else:
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
            reply_markup=generate_work_keyboard(correct_emoji),
        )


@dp.message(F.text.lower().in_(["‚õèÔ∏è —à–∞—Ö—Ç—ë—Ä", "—à–∞—Ö—Ç—ë—Ä", "—à–∞—Ö—Ç–µ—Ä", "‚õèÔ∏è —à–∞—Ö—Ç–µ—Ä"]))
async def start_mining_work(message: Message):
    user = get_user(message.from_user.id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    await message.answer(
        f"‚õèÔ∏è {clickable_name(message.from_user.id, name, clickable)}, –≤—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É —à–∞—Ö—Ç—ë—Ä–æ–º!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞—Ö—Ç—É –¥–ª—è –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:\n"
        "1Ô∏è‚É£ –ú–∞–ª–∞—è —à–∞—Ö—Ç–∞ ‚Äî –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫, –Ω–∏–∑–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞.\n"
        "2Ô∏è‚É£ –°—Ä–µ–¥–Ω—è—è —à–∞—Ö—Ç–∞ ‚Äî —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫, —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞.\n"
        "3Ô∏è‚É£ –ì–ª—É–±–æ–∫–∞—è —à–∞—Ö—Ç–∞ ‚Äî –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫, –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞.",
        reply_markup=safe_reply_kb(message, mining_kb),
    )


@dp.message(
    F.text.in_(
        [
            "‚õèÔ∏è –ú–∞–ª–∞—è —à–∞—Ö—Ç–∞",
            "–ú–∞–ª–∞—è —à–∞—Ö—Ç–∞",
            "‚õèÔ∏è –°—Ä–µ–¥–Ω—è—è —à–∞—Ö—Ç–∞",
            "–°—Ä–µ–¥–Ω—è—è —à–∞—Ö—Ç–∞",
            "‚õèÔ∏è –ì–ª—É–±–æ–∫–∞—è —à–∞—Ö—Ç–∞",
            "–ì–ª—É–±–æ–∫–∞—è —à–∞—Ö—Ç–∞",
        ]
    )
)
async def handle_mining_choice(message: Message):
    user_id = message.from_user.id
    choice = message.text

    if choice in ["‚õèÔ∏è –ú–∞–ª–∞—è —à–∞—Ö—Ç–∞", "–ú–∞–ª–∞—è —à–∞—Ö—Ç–∞"]:
        reward = random.choices(
            ["—É–≥–æ–ª—å", "–∑–æ–ª–æ—Ç–æ", "–Ω–∏—á–µ–≥–æ"],
            weights=[50, 20, 30],
            k=1,
        )[0]
        reward_amount = random.randint(2, 5)
    elif choice in ["‚õèÔ∏è –°—Ä–µ–¥–Ω—è—è —à–∞—Ö—Ç–∞", "–°—Ä–µ–¥–Ω—è—è —à–∞—Ö—Ç–∞"]:
        reward = random.choices(
            ["—É–≥–æ–ª—å", "–∑–æ–ª–æ—Ç–æ", "–∞–ª–º–∞–∑—ã", "–Ω–∏—á–µ–≥–æ"],
            weights=[30, 20, 10, 40],
            k=1,
        )[0]
        reward_amount = random.randint(5, 10)
    elif choice in ["‚õèÔ∏è –ì–ª—É–±–æ–∫–∞—è —à–∞—Ö—Ç–∞", "–ì–ª—É–±–æ–∫–∞—è —à–∞—Ö—Ç–∞"]:
        reward = random.choices(
            ["—É–≥–æ–ª—å", "–∑–æ–ª–æ—Ç–æ", "–∞–ª–º–∞–∑—ã", "–Ω–∏—á–µ–≥–æ"],
            weights=[8, 17, 25, 50],
            k=1,
        )[0]
        reward_amount = random.randint(10, 20)

    if reward == "–Ω–∏—á–µ–≥–æ":
        await message.answer(
            "üò¢ –í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", reply_markup=safe_reply_kb(message, mining_kb)
        )
    else:
        balance = get_balance(user_id) + reward_amount
        update_balance(user_id, balance)
        await message.answer(
            f"üéâ –í—ã –Ω–∞—à–ª–∏ {reward} –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {reward_amount}$!\n"
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}$",
            reply_markup=safe_reply_kb(message, mining_kb),
        )

@dp.message(F.text.lower().in_(["–∏–º—É—â–µ—Å—Ç–≤–æ", "–∏–º"]))
async def show_assets_command(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    assets_text = get_assets_text(user)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ –ü—Ä–æ–¥–∞—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ", callback_data="sell_assets")],
        ]
    )
    await message.answer(
        f"üì¶ {clickable_name(user_id, name, clickable)} –≤–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ:\n{assets_text}",
        reply_markup=kb,
        parse_mode="HTML"
    )


@dp.message(F.text.lower().in_(["–±–∞–Ω–∫", "bank", "/bank", "üè¶ –±–∞–Ω–∫"]))
async def show_bank_menu(message: Message):
    user = get_user(message.from_user.id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    bank_sum = user.get('user_bank', 0)
    await message.answer(
        f"üè¶ <b>–ë–∞–Ω–∫ {clickable_name(message.from_user.id, name, clickable)}</b>\n\n"
        f"üì¶ <b>–°—á—ë—Ç:</b> <code>{format_amount(bank_sum)}$</code>\n\n\n"
        "‚ûï <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å</b>: <code>–±–∞–Ω–∫ (—Å—É–º–º–∞)</code>\n"
        "‚ûñ <b>–°–Ω—è—Ç—å</b>: <code>–±–∞–Ω–∫ -(—Å—É–º–º–∞)</code>\n",
        parse_mode="HTML",
        reply_markup=get_bank_main_kb()
    )


@dp.callback_query(F.data == "bank_deposits")
async def bank_deposits_callback(callback: CallbackQuery):
    user = get_user(callback.from_user.id)
    deposits = user.get("user_deposits", [])
    text = "üìà <b>–í–∞—à–∏ –≤–∫–ª–∞–¥—ã:</b>\n\n"
    total = 0
    if not deposits:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–≤.\n"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥", callback_data="create_deposit")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bank_main")],
            ]
        )
    else:
        for i, dep in enumerate(deposits, 1):
            text += (
            f"{i}. {format_amount(dep['amount'])}$ ‚Äî {dep['days']} –¥–Ω., {dep['percent']}%/–¥–µ–Ω—å\n"
        )
            total += dep['amount']
        text += f"\n<b>–°—É–º–º–∞ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–≤:</b> <code>{format_amount(total)}$</code>\n"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥", callback_data="create_deposit")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥", callback_data="close_deposit")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bank_main")],
            ]
        )
    text += "\n–ú–∞–∫—Å–∏–º—É–º 3 –≤–∫–ª–∞–¥–∞, –æ–±—â–∞—è —Å—É–º–º–∞ –Ω–µ –±–æ–ª–µ–µ 1 000 000$."
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=kb,
    )
    await callback.answer()
    
    
    
@dp.callback_query(F.data == "close_deposit")
async def close_deposit_callback(callback: CallbackQuery, state: FSMContext):
    user = get_user(callback.from_user.id)
    deposits = user.get("user_deposits", [])
    if not deposits:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤–∫–ª–∞–¥–æ–≤.", show_alert=True)
        return
    # –ö–Ω–æ–ø–∫–∏ –ø–æ –Ω–æ–º–µ—Ä–∞–º –≤–∫–ª–∞–¥–æ–≤
    buttons = [
        [InlineKeyboardButton(text=f"–í–∫–ª–∞–¥ {i+1}", callback_data=f"close_deposit_{i}")]
        for i in range(len(deposits))
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bank_deposits")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:",
        reply_markup=kb
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("close_deposit_"))
async def close_deposit_number_callback(callback: CallbackQuery, state: FSMContext):
    user = get_user(callback.from_user.id)
    deposits = user.get("user_deposits", [])
    try:
        idx = int(callback.data.replace("close_deposit_", ""))
        deposit = deposits[idx]
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∫–ª–∞–¥–∞.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç—ë–∫ –ª–∏ —Å—Ä–æ–∫ –≤–∫–ª–∞–¥–∞
    now = int(time.time())
    days_passed = (now - deposit["start"]) // 86400
    is_early = days_passed < deposit["days"]

    if is_early:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∞ –≤ FSM –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(close_deposit_idx=idx)
        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥ –¥–æ—Å—Ä–æ—á–Ω–æ!\n"
            f"–í–∞–º –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞: <b>{format_amount(deposit['amount'])}$</b> (–±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤).\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥?\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ <code>–¥–∞</code> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ <code>–Ω–µ—Ç</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bank_deposits")]
                ]
            ),
            parse_mode="HTML"
        )
        await state.set_state("waiting_for_close_deposit_confirm")
    else:
        update_balance(callback.from_user.id, get_balance(callback.from_user.id) + deposit["amount"])
        deposits.pop(idx)
        save_user_data()
        await callback.message.edit_text(
            f"‚úÖ –í–∫–ª–∞–¥ –Ω–∞ <b>{format_amount(deposit['amount'])}$</b> –∑–∞–∫—Ä—ã—Ç –∏ –≤–æ–∑–≤—Ä–∞—â—ë–Ω –Ω–∞ —Å—á—ë—Ç.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìà –í–∫–ª–∞–¥—ã", callback_data="bank_deposits")],
                    [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back_to_menu")],
                ]
            ),
            parse_mode="HTML"
        )
        await callback.answer()
    
    
@dp.callback_query(F.data == "create_deposit")
async def create_deposit_callback(callback: CallbackQuery, state: FSMContext):
    user = get_user(callback.from_user.id)
    deposits = user.get("user_deposits", [])
    total = sum(dep['amount'] for dep in deposits)
    if len(deposits) >= 3:
        await callback.message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ 3 –≤–∫–ª–∞–¥–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–æ–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö.")
        await callback.answer()
        return
    if total >= 1_000_000:
        await callback.message.answer("‚ùå –°—É–º–º–∞ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1 000 000$.")
        await callback.answer()
        return
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤–∫–ª–∞–¥–∞:",
        reply_markup=get_deposit_terms_kb()
    )
    await state.set_state(BankDepositState.waiting_for_deposit_amount)
    await callback.answer()

@dp.callback_query(F.data == "bank_main")
async def bank_main_callback(callback: CallbackQuery):
    user = get_user(callback.from_user.id)
    process_deposits(user)
    bank_sum = user.get('user_bank', 0)
    deposits = user.get("user_deposits", [])
    deposits_text = ""
    if deposits:
        deposits_text = "\nüìà <b>–í–∫–ª–∞–¥—ã:</b>\n"
        for i, dep in enumerate(deposits, 1):
            deposits_text += f"{i}. {format_amount(dep['amount'])}$ ‚Äî {dep['days']} –¥–Ω., {dep['percent']}%/–¥–µ–Ω—å\n"
        deposits_text += f"\n<b>–°—É–º–º–∞ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–≤:</b> <code>{sum(dep['amount'] for dep in deposits):,}$</code>\n"
    else:
        deposits_text = "\nüìà –í–∫–ª–∞–¥—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"

    await callback.message.answer(
        f"üè¶ <b>–ë–∞–Ω–∫</b>\n\n"
        f"üì¶ <b>–°—á—ë—Ç:</b> <code>{bank_sum:,}$</code>\n\n\n"
        "‚ûï <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å</b>: <code>–±–∞–Ω–∫ (—Å—É–º–º–∞)</code>\n"
        "‚ûñ <b>–°–Ω—è—Ç—å</b>: <code>–±–∞–Ω–∫ -(—Å—É–º–º–∞)</code>\n",
        parse_mode="HTML",
        reply_markup=get_bank_main_kb()
    )
    await callback.answer()


@dp.message(StateFilter("waiting_for_close_deposit_confirm"))
async def confirm_close_deposit(message: Message, state: FSMContext):
    answer = message.text.strip().lower()
    data = await state.get_data()
    idx = data.get("close_deposit_idx")
    user = get_user(message.from_user.id)
    deposits = user.get("user_deposits", [])
    if answer == "–¥–∞" and idx is not None and 0 <= idx < len(deposits):
        deposit = deposits[idx]
        update_balance(message.from_user.id, get_balance(message.from_user.id) + deposit["amount"])
        deposits.pop(idx)
        save_user_data()
        await message.answer(
            f"‚úÖ –í–∫–ª–∞–¥ –Ω–∞ {format_amount(deposit['amount'])}$ –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç –∏ –≤–æ–∑–≤—Ä–∞—â—ë–Ω –Ω–∞ —Å—á—ë—Ç (–±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤).",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìà –í–∫–ª–∞–¥—ã", callback_data="bank_deposits")],
                    [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back_to_menu")],
                ]
            )
        )
        await state.clear()
    elif answer == "–Ω–µ—Ç":
        await message.answer("‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üìà –í–∫–ª–∞–¥—ã", callback_data="bank_deposits")]]
        ))
        await state.clear()
    else:
        await message.answer("‚ùì –ù–∞–ø–∏—à–∏—Ç–µ `–¥–∞` –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ `–Ω–µ—Ç` –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


@dp.message(F.text.lower().in_(["–≤–∫–ª–∞–¥—ã", "–≤–∫–ª–∞–¥"]))
async def show_deposits_command(message: Message):
    user = get_user(message.from_user.id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    deposits = user.get("user_deposits", [])
    text = f"üìà <b>–í–∫–ª–∞–¥—ã {clickable_name(message.from_user.id, name, clickable)}:</b>\n\n"
    total = 0
    if not deposits:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–≤.\n"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥", callback_data="create_deposit")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bank_main")],
            ]
        )
    else:
        for i, dep in enumerate(deposits, 1):
            text += (
                f"{i}. {dep['amount']:,}$ ‚Äî {dep['days']} –¥–Ω., {dep['percent']}%/–¥–µ–Ω—å\n"
            )
            total += dep['amount']
        text += f"\n<b>–°—É–º–º–∞ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–≤:</b> <code>{total:,}$</code>\n"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥", callback_data="create_deposit")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥", callback_data="close_deposit")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bank_main")],
            ]
        )
    text += "\n–ú–∞–∫—Å–∏–º—É–º 3 –≤–∫–ª–∞–¥–∞, –æ–±—â–∞—è —Å—É–º–º–∞ –Ω–µ –±–æ–ª–µ–µ 1 000 000$."
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=kb,
    )


@dp.callback_query(F.data.in_(["deposit_1d", "deposit_3d", "deposit_7d"]))
async def deposit_choose_term(callback: CallbackQuery, state: FSMContext):
    terms = {
        "deposit_1d": (1, 3),
        "deposit_3d": (3, 5),
        "deposit_7d": (7, 7),
    }
    days, percent = terms[callback.data]
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ (–¥–æ {format_amount(BANK_DEPOSIT_LIMIT)}$):",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bank_deposits")]]
        )
    )
    await state.update_data(deposit_days=days, deposit_percent=percent)
    await state.set_state(BankDepositState.waiting_for_deposit_amount)
    await callback.answer()


@dp.message(StateFilter(BankDepositState.waiting_for_deposit_amount))
async def deposit_amount_input(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    data = await state.get_data()
    if "deposit_days" not in data or "deposit_percent" not in data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!")
        await state.clear()
        return
    days = data["deposit_days"]
    percent = data["deposit_percent"]
    text = message.text.lower().replace(" ", "")
    if text in ["–≤—Å–µ", "–≤—Å—ë", "all"]:
        available = get_balance(message.from_user.id)
        amount = min(available, BANK_DEPOSIT_LIMIT)
        if amount < 100:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∞ (–º–∏–Ω–∏–º—É–º 100$).")
            return
    else:
        text = text.replace("–∫", "000").replace("k", "000")
        try:
            amount = int(text)
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return
    if amount < 100 or amount > BANK_DEPOSIT_LIMIT:
        await message.answer(f"‚ùå –°—É–º–º–∞ –≤–∫–ª–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 100 –¥–æ {format_amount(BANK_DEPOSIT_LIMIT)}$.")
        return
    if get_balance(message.from_user.id) < amount:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
        return
    deposit = {
        "amount": amount,
        "start": int(time.time()),
        "days": days,
        "percent": percent,
    }
    user.setdefault("user_deposits", []).append(deposit)
    update_balance(message.from_user.id, get_balance(message.from_user.id) - amount)
    save_user_data()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìà –í–∫–ª–∞–¥—ã", callback_data="bank_deposits")],
            [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back_to_menu")],
        ]
    )
    await message.answer(
        f"‚úÖ –î–µ–ø–æ–∑–∏—Ç –Ω–∞ {format_amount(amount)}$ –æ—Ç–∫—Ä—ã—Ç –Ω–∞ {days} –¥–Ω. –ø–æ–¥ {percent}% –≤ –¥–µ–Ω—å.",
        reply_markup=kb
    )
    await state.clear()
    
    
@dp.callback_query(F.data == "bank_save_add")
async def bank_save_add_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000, 1–∫, –≤—Å–µ):",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bank_main")]]
        ),
    )
    await state.set_state(BankSaveState.waiting_for_bank_save_add)
    await callback.answer()


@dp.callback_query(F.data == "bank_save_withdraw")
async def bank_save_withdraw_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è —Å–æ —Å—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000, 1–∫, –≤—Å–µ):",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bank_main")]]
        ),
    )
    await state.set_state(BankSaveState.waiting_for_bank_save_withdraw)
    await callback.answer()
    
    

@dp.message(StateFilter(BankSaveState.waiting_for_bank_save_add))
async def bank_save_add_amount(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    text = message.text.lower().replace(" ", "")
    if text in ["–≤—Å–µ", "–≤—Å—ë", "all"]:
        amount = get_balance(message.from_user.id)
    else:
        text = text.replace("–∫", "000").replace("k", "000")
        try:
            amount = int(text)
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return
    if amount <= 0 or get_balance(message.from_user.id) < amount:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return
    user["user_bank"] = user.get("user_bank", 0) + amount
    update_balance(message.from_user.id, get_balance(message.from_user.id) - amount)
    save_user_data()
    await message.answer(
        f"‚úÖ <code>{format_amount(amount)}</code>$ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å—á—ë—Ç.\n–í—Å–µ–≥–æ –Ω–∞ —Å—á—ë—Ç–µ: <code>{format_amount(user.get('user_bank', 0))}$</code>.",
        parse_mode="HTML")
    await state.clear()


@dp.message(StateFilter(BankSaveState.waiting_for_bank_save_withdraw))
async def bank_save_withdraw_amount(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    text = message.text.lower().replace(" ", "")
    if text in ["–≤—Å–µ", "–≤—Å—ë", "all"]:
        amount = user.get("user_bank", 0)
    else:
        text = text.replace("–∫", "000").replace("k", "000")
        try:
            amount = int(text)
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return
    if amount <= 0 or user.get("user_bank", 0) < amount:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ.")
        return
    user["user_bank"] = user.get("user_bank", 0) - amount
    update_balance(message.from_user.id, get_balance(message.from_user.id) + amount)
    save_user_data()
    await message.answer(
        f"‚úÖ <code>{format_amount(amount)}</code>$ —Å–Ω—è—Ç–æ —Å–æ —Å—á—ë—Ç–∞.\n–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å—á—ë—Ç–µ: <code>{format_amount(user.get('user_bank', 0))}$</code>.",
        parse_mode="HTML")
    await state.clear()




@dp.message(F.text.lower().startswith("–±–∞–Ω–∫"))
async def bank_command(message: Message):
    user = get_user(message.from_user.id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    parts = message.text.lower().split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            f"‚ùå {clickable_name(message.from_user.id, name, clickable)}, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä:\n"
            "<code>–±–∞–Ω–∫ 1000</code>\n"
            "<code>–±–∞–Ω–∫ -500</code>\n"
            "<code>–±–∞–Ω–∫ –≤—Å–µ</code>\n"
            "<code>–±–∞–Ω–∫ -–≤—Å–µ</code>\n"
            "<code>–±–∞–Ω–∫ 1/3</code>\n"
            "<code>–±–∞–Ω–∫ -1/3</code>",
            parse_mode="HTML"
        )
        return

    text = parts[1].replace(" ", "")
    if text in ["–≤—Å–µ", "–≤—Å—ë", "all"]:
        amount = get_balance(message.from_user.id)
    elif text in ["-–≤—Å–µ", "-–≤—Å—ë", "-all"]:
        amount = -user.get("user_bank", 0)
    else:
        sign = -1 if text.startswith("-") else 1
        text_num = text.lstrip("-")
        try:
            amount_parsed = parse_k(text_num)
        except Exception:
            amount_parsed = None
        if amount_parsed is None:
            await message.answer(
                f"‚ùå {clickable_name(message.from_user.id, name, clickable)}, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä:\n"
                "<code>–±–∞–Ω–∫ 1000</code>\n"
                "<code>–±–∞–Ω–∫ -500</code>\n"
                "<code>–±–∞–Ω–∫ –≤—Å–µ</code>\n"
                "<code>–±–∞–Ω–∫ -–≤—Å–µ</code>\n"
                "<code>–±–∞–Ω–∫ 1/3</code>\n"
                "<code>–±–∞–Ω–∫ -1/3</code>",
                parse_mode="HTML"
            )
            return
        amount = amount_parsed * sign

    # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    if amount > 0:
        if get_balance(message.from_user.id) < amount:
            await message.answer(
                f"‚ùå {clickable_name(message.from_user.id, name, clickable)}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.",
                parse_mode="HTML"
            )
            return
        user["user_bank"] = user.get("user_bank", 0) + amount
        update_balance(message.from_user.id, get_balance(message.from_user.id) - amount)
        save_user_data()
        await message.answer(
            f"‚úÖ {clickable_name(message.from_user.id, name, clickable)}, <code>{format_amount(amount)}$</code> –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å—á—ë—Ç.\n"
            f"–í—Å–µ–≥–æ –Ω–∞ —Å—á—ë—Ç–µ: <code>{format_amount(user['user_bank'])}$</code>.",
            parse_mode="HTML"
        )
    # –°–Ω—è—Ç–∏–µ
    elif amount < 0:
        amount = abs(amount)
        if user.get("user_bank", 0) < amount:
            await message.answer(
                f"‚ùå {clickable_name(message.from_user.id, name, clickable)}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ.",
                parse_mode="HTML"
            )
            return
        user["user_bank"] -= amount
        update_balance(message.from_user.id, get_balance(message.from_user.id) + amount)
        save_user_data()
        await message.answer(
            f"‚úÖ {clickable_name(message.from_user.id, name, clickable)}, <code>{format_amount(amount)}$</code> —Å–Ω—è—Ç–æ —Å–æ —Å—á—ë—Ç–∞.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å—á—ë—Ç–µ: <code>{format_amount(user['user_bank'])}$</code>.",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            f"‚ùå {clickable_name(message.from_user.id, name, clickable)}, —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.",
            parse_mode="HTML"
        )
        
        
        

@dp.message(F.text.lower().in_(["–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", "–∞–ø–∞–Ω–µ–ª—å", '–∞–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å', '–∞–¥–º–∏–Ω–∫–∞']))
async def show_admin_panel(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in admins:
        await message.answer(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.", reply_markup=safe_reply_kb(message, menu_kb)
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å:", reply_markup=safe_reply_kb(message, admin_kb))


@dp.message(F.text == "üíµ –í—ã–¥–∞—Ç—å")
async def handle_give_money(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in admins:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", reply_markup=safe_reply_kb(message, menu_kb))
        return

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    cancel_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_give_money")]
        ]
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º FSM –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º ID/—é–∑–µ—Ä–Ω–µ–π–º
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π ID, Telegram ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏:",
        reply_markup=cancel_kb,
    )
    await state.set_state(AdminGiveMoneyState.waiting_for_user_id)


@dp.callback_query(F.data == "cancel_give_money")
async def handle_cancel_give_money(callback: CallbackQuery, state: FSMContext):
    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await callback.message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=safe_reply_kb(callback.message, admin_kb))

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    await callback.answer()

@dp.message(AdminGiveMoneyState.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    amount = parse_k(message.text.strip())
    if amount is None or amount <= 0:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    data = await state.get_data()
    recipient_id = data.get("recipient_id")
    recipient = get_user(recipient_id)
    if recipient_id is None or recipient is None:
        await message.answer("‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return

    update_balance(recipient_id, get_balance(recipient_id) + amount)
    save_user_data()
    await state.clear()

    name = recipient.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = recipient.get("clickable_name", True)
    await message.answer(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ <b>{amount}$</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {clickable_name(recipient_id, name, clickable)}.",
        parse_mode="HTML",
        reply_markup=safe_reply_kb(message, admin_kb),
    )

    try:
        await bot.send_message(
            recipient_id,
            f"üíµ –í–∞–º –≤—ã–¥–∞–ª–∏ <b>{amount}$</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
            parse_mode="HTML",
        )
    except Exception:
        pass
    

@dp.message(F.text.lower().startswith("–æ–±–Ω—É–ª–∏—Ç—å"))
async def reset_user_command(message: Message):
    user_id = message.from_user.id
    if user_id not in admins:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    parts = message.text.split()
    if len(parts) < 2 or not parts[1].isdigit():
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: `–æ–±–Ω—É–ª–∏—Ç—å 123456789`")
        return
    target_user_id = int(parts[1])
    reset_user_data(target_user_id)
    recipient = get_user(target_user_id)
    name = recipient.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏") if recipient else "–ë–µ–∑ –∏–º–µ–Ω–∏"
    clickable = recipient.get("clickable_name", True) if recipient else True
    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {clickable_name(target_user_id, name, clickable)} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã.",
        parse_mode="HTML",
        reply_markup=safe_reply_kb(message, admin_kb),
    )


@dp.message(F.text == "üóëÔ∏è –û–±–Ω—É–ª–∏—Ç—å")
async def handle_reset_button(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in admins:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=safe_reply_kb(message, menu_kb))
        return

    cancel_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")]
        ]
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º FSM –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π ID, Telegram ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å:",
        reply_markup=cancel_kb,
    )
    await state.set_state(AdminResetState.waiting_for_user_id)


@dp.callback_query(F.data == "cancel_reset")
async def handle_cancel_reset(callback: CallbackQuery, state: FSMContext):
    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await callback.message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=safe_reply_kb(callback.message, admin_kb))

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    await callback.answer()

@dp.message(AdminResetState.waiting_for_user_id)
async def process_reset_user(message: Message, state: FSMContext):
    user_input = message.text.strip()

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    recipient_id, recipient = find_user_by_identifier(user_input, utils.user_data)
    if not recipient:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FSM
    await state.update_data(
        recipient_id=recipient_id, recipient_name=recipient.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    )

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {recipient_id})?\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ <code>–¥–∞</code> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ <code>–Ω–µ—Ç</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML",
    )
    await state.set_state(AdminResetState.waiting_for_confirmation)


@dp.message(AdminGiveMoneyState.waiting_for_user_id)
async def process_give_money_user_id(message: Message, state: FSMContext):
    user_input = message.text.strip()
    recipient_id, recipient = find_user_by_identifier(user_input, utils.user_data)
    if not recipient:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(recipient_id=recipient_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å:")
    await state.set_state(AdminGiveMoneyState.waiting_for_amount)


@dp.message(AdminResetState.waiting_for_confirmation)
async def confirm_reset_user(message: Message, state: FSMContext):
    confirmation = message.text.strip().lower()
    if confirmation == "–¥–∞":
        data = await state.get_data()
        recipient_id = data.get("recipient_id")
        recipient_name = data.get("recipient_name")
        reset_user_data(recipient_id)
        await state.clear()
        # recipient —É–∂–µ –Ω–µ –Ω—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º recipient_name
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {recipient_name} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã.",
            parse_mode="HTML",
            reply_markup=safe_reply_kb(message, admin_kb),
        )
        try:
            await bot.send_message(
                recipient_id,
                "üóëÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                parse_mode="HTML",
            )
        except Exception:
            pass
    elif confirmation == "–Ω–µ—Ç":
        await state.clear()
        await message.answer("‚ùå –û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=safe_reply_kb(message, admin_kb))
    else:
        await message.answer("‚ùì –ù–∞–ø–∏—à–∏—Ç–µ <code>–¥–∞</code> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ <code>–Ω–µ—Ç</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã.", parse_mode="HTML")


@dp.message(F.text.lower().startswith("–≤—ã–¥–∞—Ç—å"))
async def handle_give_money_command(message: Message):
    user_id = message.from_user.id
    if user_id not in admins:
        await message.answer(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=safe_reply_kb(message, menu_kb)
        )
        return

    # –í—ã–¥–∞—á–∞ –ø–æ reply
    if message.reply_to_message:
        recipient_id = message.reply_to_message.from_user.id
        recipient = get_user(recipient_id)
        if not recipient:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—É—Å—Ç—å –æ–Ω –Ω–∞–ø–∏—à–µ—Ç –±–æ—Ç—É /start.")
            return
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: <code>–≤—ã–¥–∞—Ç—å 1000</code>", parse_mode="HTML")
            return
        amount_text = parts[1].strip()
        amount = parse_k(amount_text)
        if amount is None or amount <= 0:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: <code>–≤—ã–¥–∞—Ç—å 1000</code>", parse_mode="HTML")
            return
        update_balance(recipient_id, get_balance(recipient_id) + amount)
        save_user_data()
        name = recipient.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        clickable = recipient.get("clickable_name", True)
        await message.answer(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ <b>{amount}$</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {clickable_name(recipient_id, name, clickable)}.",
            parse_mode="HTML",
            reply_markup=safe_reply_kb(message, admin_kb),
        )
        try:
            await bot.send_message(
                recipient_id,
                f"üíµ –í–∞–º –≤—ã–¥–∞–ª–∏ <b>{amount}$</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
                parse_mode="HTML",
            )
        except Exception:
            pass
        return

    # –í—ã–¥–∞—á–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>–≤—ã–¥–∞—Ç—å (—Ç–≥—é–∑–µ—Ä–Ω–µ–π–º|–∞–π–¥–∏–∏–≥—Ä–æ–≤–æ–µ|—Ç–≥–∞–π–¥–∏) (—Å—É–º–º–∞)</code>\n"
            "–ò–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>–≤—ã–¥–∞—Ç—å 1000</code>",
            parse_mode="HTML",
        )
        return

    user_input = parts[1].strip()
    amount_text = parts[2].strip()
    recipient_id, recipient = find_user_by_identifier(user_input, utils.user_data)
    if not recipient:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return  

    amount = parse_k(amount_text)
    if amount is None or amount <= 0:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: <code>–≤—ã–¥–∞—Ç—å @username 10–∫</code>",
            parse_mode="HTML"
        )
        return

    update_balance(recipient_id, get_balance(recipient_id) + amount)
    save_user_data()

    name = recipient.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = recipient.get("clickable_name", True)
    await message.answer(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ <b>{amount}$</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {clickable_name(recipient_id, name, clickable)} (ID: {recipient_id}).",
        parse_mode="HTML",
        reply_markup=safe_reply_kb(message, admin_kb),
    )

    try:
        await bot.send_message(
            recipient_id,
            f"üíµ –í–∞–º –≤—ã–¥–∞–ª–∏ <b>{amount}$</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
            parse_mode="HTML",
        )
    except Exception:
        pass
    

@dp.message(AdminSetState.waiting_for_user_id)
async def process_set_user_id(message: Message, state: FSMContext):
    user_input = message.text.strip()
    recipient_id, recipient = find_user_by_identifier(user_input, utils.user_data)
    if not recipient:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(
        recipient_id=recipient_id, recipient_name=recipient.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    )

    data = await state.get_data()
    choice = data.get("choice")
    if choice == "game_id":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π ID:")
    elif choice == "balance":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:")
    elif choice == "name":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫:")
    elif choice == "bank":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞:")
    await state.set_state(AdminSetState.waiting_for_value)
    
    
@dp.message(AdminSetState.waiting_for_choice)
async def process_set_choice(message: Message, state: FSMContext):
    choice = message.text.strip().lower()

    if choice == "–Ω–∏–∫":
        await state.update_data(choice="name")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫:")
        await state.set_state(AdminSetState.waiting_for_value)
    elif choice == "–∞–π–¥–∏":
        await state.update_data(choice="game_id")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π ID:")
        await state.set_state(AdminSetState.waiting_for_value)
    elif choice == "–±–∞–ª–∞–Ω—Å":
        await state.update_data(choice="balance")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:")
        await state.set_state(AdminSetState.waiting_for_value)
    elif choice in ["–±–∞–Ω–∫", "—Å—á–µ—Ç", "—Å—á—ë—Ç"]:
        await state.update_data(choice="bank")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞:")
        await state.set_state(AdminSetState.waiting_for_value)
    elif choice == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=safe_reply_kb(message, admin_kb))
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –ù–∏–∫, –ê–π–¥–∏, –ë–∞–ª–∞–Ω—Å, –ë–∞–Ω–∫ –∏–ª–∏ –°—á—ë—Ç.",
            reply_markup=safe_reply_kb(message, admin_kb)
        )


@dp.callback_query(F.data == "set_bank")
async def handle_set_bank(callback: CallbackQuery, state: FSMContext):
    await state.update_data(choice="bank")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π ID, Telegram ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminSetState.waiting_for_user_id)
    await callback.answer()


@dp.message(AdminSetState.waiting_for_value)
async def process_set_value(message: Message, state: FSMContext):
    data = await state.get_data()
    choice = data.get("choice")
    value = message.text.strip()

    if choice == "game_id":
        if not value.isdigit():
            await message.answer("‚ùå –ò–≥—Ä–æ–≤–æ–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        field = "–∞–π–¥–∏"
    elif choice == "balance":
        try:
            value = int(value)
            if value < 0:
                raise ValueError
        except ValueError:
            await message.answer("‚ùå –ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        field = "–±–∞–ª–∞–Ω—Å"
    elif choice == "name":
        if len(value) > 30:
            await message.answer("‚ùå –ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        field = "–Ω–∏–∫"
    elif choice == "bank":
        try:
            amount = parse_k(value)
            if amount is None or amount < 0:
                raise ValueError
            value = amount
        except ValueError:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–ª—è –±–∞–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        field = "–±–∞–Ω–∫"
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    await state.update_data(value=value, field=field, action="set_value")

    recipient_id = data.get("recipient_id")
    recipient = get_user(recipient_id)
    name = recipient.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏") if recipient else "–ë–µ–∑ –∏–º–µ–Ω–∏"
    clickable = recipient.get("clickable_name", True) if recipient else True
    field_name = {"–∞–π–¥–∏": "–ò–≥—Ä–æ–≤–æ–π ID", "–±–∞–ª–∞–Ω—Å": "–ë–∞–ª–∞–Ω—Å", "–Ω–∏–∫": "–ù–∏–∫", "–±–∞–Ω–∫": "–ë–∞–Ω–∫"}.get(field, field)
    await message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {field_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {clickable_name(recipient_id, name, clickable)}?\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ <code>–¥–∞</code> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ <code>–Ω–µ—Ç</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML"
    )
    await state.set_state(AdminSetState.waiting_for_confirmation)




@dp.message(F.text == "üõ†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
async def handle_set_command(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in admins:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", reply_markup=safe_reply_kb(message, menu_kb))
        return

    await message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?",
        reply_markup=admin_set_kb,
    )


@dp.callback_query(F.data == "set_name")
async def handle_set_name(callback: CallbackQuery, state: FSMContext):
    await state.update_data(choice="name")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π ID, Telegram ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminSetState.waiting_for_user_id)
    await callback.answer()


@dp.callback_query(F.data == "set_game_id")
async def handle_set_game_id(callback: CallbackQuery, state: FSMContext):
    await state.update_data(choice="game_id")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π ID, Telegram ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminSetState.waiting_for_user_id)
    await callback.answer()


@dp.callback_query(F.data == "set_balance")
async def handle_set_balance(callback: CallbackQuery, state: FSMContext):
    await state.update_data(choice="balance")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π ID, Telegram ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminSetState.waiting_for_user_id)
    await callback.answer()


@dp.callback_query(F.data == "cancel_set")
async def handle_cancel_set(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=safe_reply_kb(callback.message, admin_kb))
    await callback.answer()

@dp.message(F.text.lower().startswith("—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"))
async def set_user_data_command(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in admins:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤", reply_markup=safe_reply_kb(message, menu_kb))
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏
    parts = message.text.split(maxsplit=3)
    if len(parts) < 4:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (–Ω–∏–∫|–∞–π–¥–∏|–±–∞–ª–∞–Ω—Å|–±–∞–Ω–∫|—Å—á–µ—Ç) (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) (–∑–Ω–∞—á–µ–Ω–∏–µ)</code>",
            parse_mode="HTML",
        )
        return

    field = parts[1].strip().lower()
    user_input = parts[2].strip()
    value = parts[3].strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—è
    if field not in ["–Ω–∏–∫", "–∞–π–¥–∏", "–±–∞–ª–∞–Ω—Å", "–±–∞–Ω–∫", "—Å—á–µ—Ç", "—Å—á—ë—Ç"]:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω–æ –∏–∑: <code>–Ω–∏–∫</code>, <code>–∞–π–¥–∏</code>, <code>–±–∞–ª–∞–Ω—Å</code>, <code>–±–∞–Ω–∫</code>, <code>—Å—á–µ—Ç</code>.",
            parse_mode="HTML"
        )
        return

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–≥—Ä–æ–≤–æ–º—É ID, Telegram ID –∏–ª–∏ Telegram-—é–∑–µ—Ä–Ω–µ–π–º—É
    recipient_id, recipient = find_user_by_identifier(user_input, utils.user_data)
    if not recipient:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    if field == "–∞–π–¥–∏":
        if not value.isdigit():
            await message.answer("‚ùå –ò–≥—Ä–æ–≤–æ–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
    elif field == "–±–∞–ª–∞–Ω—Å":
        try:
            amount = parse_k(value)
            if amount is None or amount < 0:
                raise ValueError
        except ValueError:
            await message.answer("‚ùå –ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    elif field == "–Ω–∏–∫":
        if len(value) > 30:
            await message.answer("‚ùå –ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
    elif field in ["–±–∞–Ω–∫", "—Å—á–µ—Ç", "—Å—á—ë—Ç"]:
        try:
            amount = parse_k(value)
            if amount is None or amount < 0:
                raise ValueError
        except ValueError:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–ª—è –±–∞–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

    # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–∏–∫–∞
    name = recipient.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = recipient.get("clickable_name", True)

    await state.update_data(
        field=field,
        recipient_id=recipient_id,
        recipient_name=name,
        value=value,
        action="set_value"
    )

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {field} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {clickable_name(recipient_id, name, clickable)}?\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ <code>–¥–∞</code> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ <code>–Ω–µ—Ç</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML",
    )
    await state.set_state(AdminSetState.waiting_for_confirmation)


@dp.message(AdminSetState.waiting_for_confirmation)
async def confirm_set_value(message: Message, state: FSMContext):
    answer = message.text.strip().lower()
    data = await state.get_data()
    if answer == "–¥–∞":
        recipient_id = data.get("recipient_id")
        value = data.get("value")
        field = data.get("field")
        recipient = get_user(recipient_id)
        name = recipient.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏") if recipient else "–ë–µ–∑ –∏–º–µ–Ω–∏"
        clickable = recipient.get("clickable_name", True) if recipient else True

        if field == "–∞–π–¥–∏":
            recipient["game_id"] = int(value)
        elif field == "–±–∞–ª–∞–Ω—Å":
            recipient["balance"] = int(value)
        elif field == "–Ω–∏–∫":
            recipient["name"] = value
        elif field == "–±–∞–Ω–∫" or field in ["—Å—á–µ—Ç", "—Å—á—ë—Ç"]:
            recipient["user_bank"] = parse_k(str(value))
        save_user_data()
        await state.clear()
        await message.answer(
            f"‚úÖ {field.capitalize()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {clickable_name(recipient_id, name, clickable)} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.",
            parse_mode="HTML",
            reply_markup=safe_reply_kb(message, admin_kb),
        )
    elif answer == "–Ω–µ—Ç":
        await state.clear()
        await message.answer("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=safe_reply_kb(message, admin_kb))
    else:
        await message.answer(
            "‚ùì –ù–∞–ø–∏—à–∏—Ç–µ <code>–¥–∞</code> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ <code>–Ω–µ—Ç</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="HTML"
        )



@dp.message(AdminResetState.waiting_for_confirmation)
async def confirm_reset_user2(message: Message, state: FSMContext):
    confirmation = message.text.strip().lower()

    if confirmation == "–¥–∞":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
        data = await state.get_data()
        recipient_id = data.get("recipient_id")
        recipient_name = data.get("recipient_name")

        # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å, –∏–≥—Ä–æ–≤–æ–π ID –∏ –∏–º—É—â–µ—Å—Ç–≤–æ
        recipient = utils.user_data.get(str(recipient_id))
        if recipient:
            recipient["balance"] = 0
            recipient["game_id"] = random.randint(100000, 999999)
            recipient["assets"] = {
                "cars": [],
                "houses": [],
                "yachts": [],
                "planes": [],
                "helicopters": [],
                "smartphones": [],
            }
            save_user_data()

        # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
        await state.clear()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {recipient_name} (ID: {recipient_id}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª—ë–Ω.\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: 0$\nüÜî –ò–≥—Ä–æ–≤–æ–π ID: —Å–±—Ä–æ—à–µ–Ω.\nüì¶ –ò–º—É—â–µ—Å—Ç–≤–æ: —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=safe_reply_kb(message, admin_kb),
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                recipient_id,
                "üóëÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å, –∏–≥—Ä–æ–≤–æ–π ID –∏ –∏–º—É—â–µ—Å—Ç–≤–æ –±—ã–ª–∏ –æ–±–Ω—É–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                parse_mode="HTML",
            )
        except Exception:
            pass

    elif confirmation == "–Ω–µ—Ç":
        await state.clear()
        await message.answer("‚ùå –û–±–Ω—É–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=safe_reply_kb(message, admin_kb))
    else:
        await message.answer(
            "‚ùì –ù–∞–ø–∏—à–∏—Ç–µ <code>–¥–∞</code> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ <code>–Ω–µ—Ç</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="HTML"
        )


@dp.message(F.text.lower().startswith("‚ùì —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"))
async def admin_help_command(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in admins:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º
    await message.answer(admin_panel_help_text, parse_mode="HTML")



@dp.message(F.text.lower().startswith("–∏–Ω—Ñ–æ "), StateFilter(default_state))
async def handle_info_with_argument(message: Message):
    user_id = message.from_user.id
    if user_id not in admins:
        await message.answer(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=safe_reply_kb(message, menu_kb)
        )
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID, –∏–≥—Ä–æ–≤–æ–π ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_input = parts[1].strip()
    recipient_id, recipient = find_user_by_identifier(user_input, utils.user_data)
    if not recipient:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    name = recipient.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = recipient.get("clickable_name", True)
    game_id = recipient.get("game_id", "–ù–µ —É–∫–∞–∑–∞–Ω")
    balance = recipient.get("balance", 0)
    bank_account = recipient.get("user_bank", 0)
    deposits = recipient.get("user_deposits", [])
    telegram_username = recipient.get("telegram_username", "–ù–µ —É–∫–∞–∑–∞–Ω")
    referrals = len(recipient.get("referrals", []))
    assets = get_assets_text(recipient)

    if deposits:
        deposits_text = "\n".join(
            [f"- {format_amount(dep['amount'])}$ –Ω–∞ {dep['days']} –¥–Ω. –ø–æ–¥ {dep['percent']}%" for dep in deposits]
        )
        deposits_sum = sum(dep['amount'] for dep in deposits)
    else:
        deposits_text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–≤."
        deposits_sum = 0

    info_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üóëÔ∏è –û–±–Ω—É–ª–∏—Ç—å", callback_data=f"reset_user:{recipient_id}"),
                InlineKeyboardButton(text="üíµ –í—ã–¥–∞—Ç—å", callback_data=f"give_money:{recipient_id}"),
            ]
        ]
    )

    await message.answer(
        f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
        f"–ò–º—è: {clickable_name(recipient_id, name, clickable)}\n"
        f"üÜî –ò–≥—Ä–æ–≤–æ–π ID: <code>{game_id}</code>\n"
        f"üí≥ Telegram ID: <code>{recipient_id}</code>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{format_amount(balance)}$</b>\n"
        f"üè¶ –ë–∞–Ω–∫: <b>{format_amount(bank_account)}$</b>\n"
        f"üìà –í–∫–ª–∞–¥—ã ({format_amount(deposits_sum)}$):\n{deposits_text}\n"
        f"üì¶ –ò–º—É—â–µ—Å—Ç–≤–æ:\n{assets}\n"
        f"Telegram: @{telegram_username}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals}",
        parse_mode="HTML",
        reply_markup=info_kb,
    )


@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def handle_info_button(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in admins:
        await message.answer(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=safe_reply_kb(message, menu_kb)
        )
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π ID, Telegram ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminInfoState.waiting_for_user_id)

@dp.message(AdminInfoState.waiting_for_user_id)
async def process_info_user_id(message: Message, state: FSMContext):
    user_input = message.text.strip()
    recipient_id, recipient = find_user_by_identifier(user_input, utils.user_data)
    if not recipient:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.clear()

    name = recipient.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = recipient.get("clickable_name", True)
    game_id = recipient.get("game_id", "–ù–µ —É–∫–∞–∑–∞–Ω")
    balance = recipient.get("balance", 0)
    bank_account = recipient.get("user_bank", 0)
    deposits = recipient.get("user_deposits", [])
    telegram_username = recipient.get("telegram_username", "–ù–µ —É–∫–∞–∑–∞–Ω")
    referrals = len(recipient.get("referrals", []))
    assets = get_assets_text(recipient)

    if deposits:
        deposits_text = "\n".join(
            [f"- {format_amount(dep['amount'])}$ –Ω–∞ {dep['days']} –¥–Ω. –ø–æ–¥ {dep['percent']}%" for dep in deposits]
        )
        deposits_sum = sum(dep['amount'] for dep in deposits)
    else:
        deposits_text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–≤."
        deposits_sum = 0

    info_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üóëÔ∏è –û–±–Ω—É–ª–∏—Ç—å", callback_data=f"reset_user:{recipient_id}"),
                InlineKeyboardButton(text="üíµ –í—ã–¥–∞—Ç—å", callback_data=f"give_money:{recipient_id}"),
            ]
        ]
    )

    await message.answer(
        f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
        f"–ò–º—è: {clickable_name(recipient_id, name, clickable)}\n"
        f"üÜî –ò–≥—Ä–æ–≤–æ–π ID: <code>{game_id}</code>\n"
        f"üí≥ Telegram ID: <code>{recipient_id}</code>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{format_amount(balance)}$</b>\n"
        f"üè¶ –ë–∞–Ω–∫: <b>{format_amount(bank_account)}$</b>\n"
        f"üìà –í–∫–ª–∞–¥—ã ({format_amount(deposits_sum)}$):\n{deposits_text}\n"
        f"üì¶ –ò–º—É—â–µ—Å—Ç–≤–æ:\n{assets}\n"
        f"Telegram: @{telegram_username}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals}",
        parse_mode="HTML",
        reply_markup=info_kb,
    )


@dp.callback_query(F.data.startswith("reset_user:"))
async def handle_reset_user_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in admins:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    recipient_id = int(callback.data.split(":")[1])
    recipient = utils.user_data.get(str(recipient_id))
    if not recipient:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(recipient_id=recipient_id, recipient_name=recipient.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏"))
    await callback.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (ID: {recipient_id})?\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ <code>–¥–∞</code> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ <code>–Ω–µ—Ç</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML",
    )
    await state.set_state(AdminResetState.waiting_for_confirmation)
    await callback.answer()
    

@dp.callback_query(F.data.startswith("give_money:"))
async def handle_give_money_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in admins:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return
    recipient_id = int(callback.data.split(":")[1])
    recipient = utils.user_data.get(str(recipient_id))
    if not recipient:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(recipient_id=recipient_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å:")
    await state.set_state(AdminGiveMoneyState.waiting_for_amount)
    await callback.answer()
    
    
@dp.callback_query(F.data.startswith("set_user:"))
async def inline_handle_set_user_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in admins:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    recipient_id = int(callback.data.split(":")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FSM
    recipient = utils.user_data.get(str(recipient_id))
    if not recipient:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.update_data(recipient_id=recipient_id, recipient_name=recipient.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏"))

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    await callback.message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?",
        reply_markup=admin_set_kb,
    )
    await state.set_state(AdminSetState.waiting_for_choice)
    await callback.answer()
    


def load_reports():
    if os.path.exists(REPORTS_FILE):
        try:
            with open(REPORTS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return {}
    return {}

def save_reports(reports):
    try:
        with open(REPORTS_FILE, "w", encoding="utf-8") as f:
            json.dump(reports, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

def get_next_report_id():
    reports = load_reports()
    if reports:
        return str(int(max(reports.keys(), key=int)) + 1)
    return "1"

@dp.message(F.text.lower().startswith(("—Ä–µ–ø–æ—Ä—Ç", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞")))
async def report_command(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    text = message.text.strip()
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü—Ä–∏–º–µ—Ä: <code>—Ä–µ–ø–æ—Ä—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–∞–Ω–∫</code>",
            parse_mode="HTML"
        )
        return
    report_text = parts[1].strip()
    report_id = get_next_report_id()
    reports = load_reports()
    reports[report_id] = {
        "user_id": user_id,
        "user_name": name,
        "text": report_text,
        "status": "open",
        "chat_id": chat_id,
    }
    save_reports(reports)

    # –ù–æ–≤—ã–π —Å—Ç–∏–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = (
        f"{name}, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (‚Ññ{report_id}) ‚úÖ\n"
        f"‚ñ∂Ô∏è –û—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤ –¥–∞–Ω–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ"
    )
    await message.answer(confirm_text, parse_mode="HTML")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–≤—Å–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º)
    for owner_id in owners:
        owner_user = get_user(owner_id)
        if not owner_user:
            continue
        try:
            msg = await bot.send_message(
                owner_id,
                f"–†–µ–ø–æ—Ä—Ç #{report_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {clickable_name(user_id, name, clickable)}:\n{report_text}",
                parse_mode="HTML"
            )
            REPORTS_STATE[report_id] = {"user_id": user_id, "admin_msg_id": msg.message_id}
        except Exception:
            pass
        

# –û—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–ø–æ—Ä—Ç (–∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ä–µ–ø–æ—Ä—Ç)
@dp.message(lambda m: m.reply_to_message and m.from_user.id in owners)
async def reply_to_report(message: Message):
    reply = message.reply_to_message
    text = message.text.strip()
    # –ü–æ–∏—Å–∫ report_id –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è-—Ä–µ–ø–æ—Ä—Ç–∞
    report_id = None
    for line in reply.text.splitlines():
        if line.startswith("–†–µ–ø–æ—Ä—Ç #"):
            report_id = line.split("#")[1].split()[0]
            break
    if not report_id:
        return
    reports = load_reports()
    report = reports.get(report_id)
    if not report:
        await message.answer("–†–µ–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user_id = report["user_id"]
    chat_id = report.get("chat_id", user_id)
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    dt = datetime.now().strftime("%d.%m.%Y %H:%M")
    answer_text = (
        f"üîî {clickable_name(user_id, name, clickable)}, –Ω–∞ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ{report_id} –ø–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç:\n"
        f"üí¨ {text}"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üëç –ü–æ–º–æ–≥–ª–æ", callback_data=f"report_helpful:{report_id}"),
                InlineKeyboardButton(text="üëé –ù–µ –ø–æ–º–æ–≥–ª–æ", callback_data=f"report_not_helpful:{report_id}")
            ]
        ]
    )
    errors = []
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–∫—É
    try:
        await bot.send_message(user_id, answer_text, reply_markup=kb, parse_mode="HTML")
    except Exception as e:
        errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°: {e}")
    # –ï—Å–ª–∏ —Ä–µ–ø–æ—Ä—Ç –±—ã–ª –∏–∑ –≥—Ä—É–ø–ø—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —Ç—É–¥–∞
    if chat_id != user_id:
        try:
            await bot.send_message(chat_id, answer_text, reply_markup=kb, parse_mode="HTML")
        except Exception as e:
            errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É: {e}")
    report["status"] = "answered"
    save_reports(reports)
    if errors:
        await message.answer(f"–û—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–ø–æ—Ä—Ç #{report_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏:\n" + "\n".join(errors))
    else:
        await message.answer(f"–û—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–ø–æ—Ä—Ç #{report_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        

@dp.callback_query(F.data.startswith("report_helpful:"))
async def report_helpful_callback(callback: CallbackQuery):
    report_id = callback.data.split(":")[1]
    reports = load_reports()
    report = reports.get(report_id)
    if report:
        report["status"] = "closed_helpful"
        save_reports(reports)
    await callback.message.edit_text(f"üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∫–ª–∏–∫. –†–µ–ø–æ—Ä—Ç #{report_id} –∑–∞–∫—Ä—ã—Ç –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—ã–π.")

@dp.callback_query(F.data.startswith("report_not_helpful:"))
async def report_not_helpful_callback(callback: CallbackQuery):
    report_id = callback.data.split(":")[1]
    reports = load_reports()
    report = reports.get(report_id)
    if report:
        report["status"] = "closed_not_helpful"
        save_reports(reports)
    await callback.message.edit_text(
        f"üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∫–ª–∏–∫. –†–µ–ø–æ—Ä—Ç ‚Ññ{report_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã–π. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Ä–µ—à—ë–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º."
    )


@dp.message(F.text.lower().startswith(("/alert", "alert", "–∞–ª–µ—Ä—Ç")))
async def alert_command(message: Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–ª–µ—Ä—Ç–∞. –ü—Ä–∏–º–µ—Ä: <code>–∞–ª–µ—Ä—Ç –ü—Ä–∏–≤–µ—Ç!</code>", parse_mode="HTML")
        return
    alert_text = parts[1].strip()
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ (—á—Ç–æ–±—ã —Å –∑–∞–ø–∞—Å–æ–º –≤–ª–µ–∑–ª–æ –≤ 64 –±–∞–π—Ç–∞)
    if len(alert_text.encode("utf-8")) > 50:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –¥–ª—è –∞–ª–µ—Ä—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤ (–∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —ç–º–æ–¥–∑–∏/—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã).", parse_mode="HTML")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç", callback_data=f"show_alert:{alert_text}")]
        ]
    )
    await message.answer("„Ö§", reply_markup=kb)

@dp.callback_query(F.data.startswith("show_alert:"))
async def show_alert_callback(callback: CallbackQuery):
    alert_text = callback.data[len("show_alert:") :]
    await callback.answer(alert_text, show_alert=True)



if __name__ == "__main__":
    import asyncio

    async def main():
        load_user_data()
        round_all_balances()
        fix_user_data()
        global admins
        admins = utils.user_data.get("admins", admins)
        scheduler = AsyncIOScheduler()
        scheduler.add_job(process_all_deposits, "interval", minutes=10)
        scheduler.start()
        await dp.start_polling(bot)

    asyncio.run(main())