import random
from aiogram import Router, F
import math
import json
import os
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from utils import get_balance, update_balance, parse_k, round_amount, get_user, save_user_data
from keyboards import menu_kb
from aiogram.filters import Command
from utils import format_amount, clickable_name
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import bot
from aiogram.fsm.state import State, StatesGroup
COIN_GAMES_FILE = os.path.join(os.path.dirname(__file__), "coin_games.json")

class RouletteState(StatesGroup):
    waiting_for_bet_type = State()
    waiting_for_bet_amount = State()

class CrashState(StatesGroup):
    waiting_for_coef = State()
    waiting_for_amount = State()


class CoinState(StatesGroup):
    waiting_for_accept = State()


def load_coin_games():
    if os.path.exists(COIN_GAMES_FILE):
        try:
            with open(COIN_GAMES_FILE, "r", encoding="utf-8") as f:
                return {int(k): v for k, v in json.load(f).items()}
        except Exception:
            return {}
    return {}

def save_coin_games():
    try:
        with open(COIN_GAMES_FILE, "w", encoding="utf-8") as f:
            json.dump({str(k): v for k, v in coin_games.items()}, f, ensure_ascii=False, indent=2)
    except Exception:
        pass



coin_games = load_coin_games()

router = Router()








# –î–∞–Ω–Ω—ã–µ —Ä—É–ª–µ—Ç–∫–∏
roulette_numbers = {
    "—Ä—è–¥3": [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36],
    "—Ä—è–¥2": [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35],
    "—Ä—è–¥1": [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34],
    "1-12": list(range(1, 13)),
    "13-24": list(range(13, 25)),
    "25-36": list(range(25, 37)),
    "–º–∞–ª—ã–µ": list(range(1, 19)),
    "–±–æ–ª—å—à–∏–µ": list(range(19, 37)),
    "–∫—Ä–∞—Å–Ω–æ–µ": [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36],
    "—á–µ—Ä–Ω–æ–µ": [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35],
    "–∑–µ–ª–µ–Ω–æ–µ": [0],
    "—á–µ—Ç": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36],
    "–Ω–µ—á–µ—Ç": [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35],
}

bet_multipliers = {
    "—á–∏—Å–ª–æ": 36,
    "–∑–µ–ª–µ–Ω–æ–µ": 36,
    "—Ä—è–¥1": 3,
    "—Ä—è–¥2": 3,
    "—Ä—è–¥3": 3,
    "1-12": 3,
    "13-24": 3,
    "25-36": 3,
    "–∫—Ä–∞—Å–Ω–æ–µ": 2,
    "—á–µ—Ä–Ω–æ–µ": 2,
    "—á–µ—Ç": 2,
    "–Ω–µ—á–µ—Ç": 2,
    "–º–∞–ª—ã–µ": 2,
    "–±–æ–ª—å—à–∏–µ": 2,
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
bet_aliases = {
    "–∫": "–∫—Ä–∞—Å–Ω–æ–µ",
    "—á": "—á–µ—Ä–Ω–æ–µ",
    "–∑": "–∑–µ–ª–µ–Ω–æ–µ",
    "–∑–µ—Ä–æ": "–∑–µ–ª–µ–Ω–æ–µ",
}

@router.message(F.text.lower().startswith("—Ä "))
async def roulette_bet_short(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    balance = get_balance(user_id)

    try:
        parts = message.text.lower().split()
        if len(parts) != 3:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: —Ä –∫ 100")

        if balance <= 0:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return

        bet_type = parts[1]
        amount_str = parts[2].replace("—ë", "–µ")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        bet_type = bet_aliases.get(bet_type, bet_type)

        if amount_str == "–≤—Å–µ":
            amount = balance
        else:
            amount = parse_k(amount_str, balance)

        if amount is None or amount <= 0:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü—Ä–∏–º–µ—Ä: 100, 1–∫, 2.5–∫–∫ –∏–ª–∏ '–≤—Å–µ'")
            return

        if amount > balance:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ
        if bet_type.isdigit():
            number = int(bet_type)
            if 0 <= number <= 36:
                bet_type = "—á–∏—Å–ª–æ"
                selected_number = number
            else:
                await message.answer("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 36")
                return
        elif bet_type not in roulette_numbers:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–º–æ—â—å —Ä—É–ª–µ—Ç–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–≤–æ–∫"
            )
            return

        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
        balance -= amount
        result_number = random.randint(0, 36)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –≤—ã–ø–∞–≤—à–µ–≥–æ —á–∏—Å–ª–∞
        result_props = {
            "color": "–∑–µ–ª–µ–Ω–æ–µ"
            if result_number == 0
            else "–∫—Ä–∞—Å–Ω–æ–µ"
            if result_number in roulette_numbers["–∫—Ä–∞—Å–Ω–æ–µ"]
            else "—á–µ—Ä–Ω–æ–µ",
            "parity": "—á–µ—Ç" if result_number in roulette_numbers["—á–µ—Ç"] else "–Ω–µ—á–µ—Ç",
            "range": "1-12"
            if result_number in roulette_numbers["1-12"]
            else "13-24"
            if result_number in roulette_numbers["13-24"]
            else "25-36"
            if result_number in roulette_numbers["25-36"]
            else None,
            "size": "–º–∞–ª—ã–µ"
            if result_number in roulette_numbers["–º–∞–ª—ã–µ"]
            else "–±–æ–ª—å—à–∏–µ"
            if result_number in roulette_numbers["–±–æ–ª—å—à–∏–µ"]
            else None,
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        win = False
        if bet_type == "—á–∏—Å–ª–æ":
            win = result_number == selected_number
        else:
            win = result_number in roulette_numbers[bet_type]

        if win:
            multiplier = bet_multipliers[bet_type]
            win_amount = round_amount(amount * multiplier)
            balance += win_amount
            update_balance(user_id, balance)
            result_message = (
                f"{name}\n"
                f"üé∞ –í—ã–ø–∞–ª–æ: {result_number} ({result_props['color']})\n"
                f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}$ (x{multiplier})!\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}$"
            )
        else:
            update_balance(user_id, balance)
            result_message = (
                f"{name}\n"
                f"üé∞ –í—ã–ø–∞–ª–æ: {result_number} ({result_props['color']})\n"
                f"üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {amount}$\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}$"
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞–≤–∫—É
        user = get_user(user_id)
        user["last_bet"] = {"amount": amount, "type": bet_type}
        save_user_data()

        repeat_bet_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞–≤–∫—É",  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                        callback_data=f"repeat_bet:{amount}:{bet_type}",
                    )
                ]
            ]
        )

        await message.answer(result_message, reply_markup=repeat_bet_kb)

    except ValueError as e:
        await message.answer(str(e), reply_markup=menu_kb)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏", reply_markup=menu_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "—Ä—É–ª–µ—Ç–∫–∞"
@router.message(F.text.lower().startswith("—Ä—É–ª–µ—Ç–∫–∞"))
async def roulette_bet(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    balance = get_balance(user_id)

    try:
        parts = message.text.lower().split()
        if len(parts) != 3:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: —Ä—É–ª–µ—Ç–∫–∞ –∫—Ä–∞—Å–Ω–æ–µ 100")

        if balance <= 0:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return

        bet_type = parts[1]
        amount_str = parts[2].replace("—ë", "–µ")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        bet_type = bet_aliases.get(bet_type, bet_type)

        if amount_str == "–≤—Å–µ":
            amount = balance
        else:
            amount = parse_k(amount_str, balance)

        if amount is None or amount <= 0:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü—Ä–∏–º–µ—Ä: 100, 1–∫, 2.5–∫–∫ –∏–ª–∏ '–≤—Å–µ'")
            return

        if amount > balance:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ
        if bet_type.isdigit():
            number = int(bet_type)
            if 0 <= number <= 36:
                bet_type = "—á–∏—Å–ª–æ"
                selected_number = number
            else:
                await message.answer("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 36")
                return
        elif bet_type not in roulette_numbers:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–º–æ—â—å —Ä—É–ª–µ—Ç–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–≤–æ–∫"
            )
            return

        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
        balance -= amount
        result_number = random.randint(0, 36)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –≤—ã–ø–∞–≤—à–µ–≥–æ —á–∏—Å–ª–∞
        result_props = {
            "color": "–∑–µ–ª–µ–Ω–æ–µ"
            if result_number == 0
            else "–∫—Ä–∞—Å–Ω–æ–µ"
            if result_number in roulette_numbers["–∫—Ä–∞—Å–Ω–æ–µ"]
            else "—á–µ—Ä–Ω–æ–µ",
            "parity": "—á–µ—Ç" if result_number in roulette_numbers["—á–µ—Ç"] else "–Ω–µ—á–µ—Ç",
            "range": "1-12"
            if result_number in roulette_numbers["1-12"]
            else "13-24"
            if result_number in roulette_numbers["13-24"]
            else "25-36"
            if result_number in roulette_numbers["25-36"]
            else None,
            "size": "–º–∞–ª—ã–µ"
            if result_number in roulette_numbers["–º–∞–ª—ã–µ"]
            else "–±–æ–ª—å—à–∏–µ"
            if result_number in roulette_numbers["–±–æ–ª—å—à–∏–µ"]
            else None,
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        win = False
        if bet_type == "—á–∏—Å–ª–æ":
            win = result_number == selected_number
        else:
            win = result_number in roulette_numbers[bet_type]

        if win:
            multiplier = bet_multipliers[bet_type]
            win_amount = round_amount(amount * multiplier)
            balance += win_amount
            update_balance(user_id, balance)
            result_message = (
                f"{name}\n"
                f"üé∞ –í—ã–ø–∞–ª–æ: {result_number} ({result_props['color']})\n"
                f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}$ (x{multiplier})!\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}$"
            )
        else:
            update_balance(user_id, balance)
            result_message = (
                f"{name}\n"
                f"üé∞ –í—ã–ø–∞–ª–æ: {result_number} ({result_props['color']})\n"
                f"üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {amount}$\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}$"
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞–≤–∫—É
        user = get_user(user_id)
        user["last_bet"] = {"amount": amount, "type": bet_type}
        save_user_data()


        repeat_bet_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞–≤–∫—É",  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                        callback_data=f"repeat_bet:{amount}:{bet_type}",
                    )
                ]
            ]
        )


        await message.answer(result_message, reply_markup=repeat_bet_kb)

    except ValueError as e:
        await message.answer(str(e), reply_markup=menu_kb)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏", reply_markup=menu_kb)


@router.callback_query(F.data.startswith("repeat_bet"))
async def handle_repeat_bet(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    data = callback.data.split(":")
    amount_str = data[1]
    bet_type = data[2]

    balance = get_balance(user_id)
    amount = parse_k(str(amount_str), balance)
    if amount is None or amount <= 0:
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏.")
        await callback.answer()
        return
    if balance < amount:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏.")
        await callback.answer()
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    update_balance(user_id, balance - amount)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏
    result_number = random.randint(0, 36)
    result_color = (
        "–∑–µ–ª–µ–Ω–æ–µ"
        if result_number == 0
        else "–∫—Ä–∞—Å–Ω–æ–µ"
        if result_number in roulette_numbers["–∫—Ä–∞—Å–Ω–æ–µ"]
        else "—á–µ—Ä–Ω–æ–µ"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    win_multiplier = bet_multipliers.get(bet_type, 0)
    win_amount = amount * win_multiplier if result_number in roulette_numbers.get(bet_type, []) else 0

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∏–≥—Ä–∞–ª
    if win_amount > 0:
        update_balance(user_id, get_balance(user_id) + win_amount)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    if win_amount > 0:
        result_message = (
            f"{name}\n"
            f"üé∞ –í—ã–ø–∞–ª–æ: {result_number} ({result_color})\n"
            f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}$!\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {get_balance(user_id)}$"
        )
    else:
        result_message = (
            f"{name}\n"
            f"üé∞ –í—ã–ø–∞–ª–æ: {result_number} ({result_color})\n"
            f"üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {amount}$\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {get_balance(user_id)}$"
        )

    repeat_bet_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞–≤–∫—É",
                    callback_data=f"repeat_bet:{amount}:{bet_type}",
                )
            ]
        ]
    )

    await callback.message.answer(result_message, reply_markup=repeat_bet_kb)
    await callback.answer()
    
    
    
    
@router.callback_query(F.data == "roulette_start")
async def roulette_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä–∞—Å–Ω–æ–µ, —á–µ—Ä–Ω–æ–µ, —á–∏—Å–ª–æ –∏ —Ç.–¥.):\n\n –ü–æ–¥—Ä–æ–±–Ω–µ–µ: `–ü–æ–º–æ—â—å —Ä—É–ª–µ—Ç–∫–∞`",
        reply_markup=None,
        parse_mode="markdown",
    )
    await state.set_state(RouletteState.waiting_for_bet_type)
    await callback.answer()

@router.message(RouletteState.waiting_for_bet_type)
async def roulette_bet_type(message: Message, state: FSMContext):
    bet_type = message.text.lower().replace("—ë", "–µ")
    await state.update_data(bet_type=bet_type)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")
    await state.set_state(RouletteState.waiting_for_bet_amount)

    
@router.callback_query(F.data == "crash_start")
async def crash_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.5):")
    await state.set_state(CrashState.waiting_for_coef)
    await callback.answer()

@router.message(CrashState.waiting_for_coef)
async def crash_coef_input(message: Message, state: FSMContext):
    try:
        coef = float(message.text.replace(",", "."))
        if coef < 1.01 or coef > 1_000_000:
            await message.answer("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1.01 –¥–æ 1.000.000")
            return
        await state.update_data(coef=coef)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")
        await state.set_state(CrashState.waiting_for_amount)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç. –ü—Ä–∏–º–µ—Ä: 2.5")


    
    
def generate_crash_coef():
    """
    4% –∏–≥—Ä ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 0
    70% –∏–≥—Ä ‚Äî –¥–æ 2
    95% ‚Äî –¥–æ 5
    99% ‚Äî –¥–æ 100
    –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –¥–æ 1 000 000
    """
    min_coef = 1.01
    max_coef = 1_000_000
    p = random.random()
    if p < 0.04:
        return 0
    elif p < 0.74:
        log_min = math.log(min_coef)
        log_max = math.log(2)
    elif p < 0.95:
        log_min = math.log(2)
        log_max = math.log(5)
    elif p < 0.99:
        log_min = math.log(5)
        log_max = math.log(100)
    else:
        log_min = math.log(100)
        log_max = math.log(max_coef)
    log_value = random.uniform(log_min, log_max)
    coef = math.exp(log_value)
    return round(coef, 2)



@router.message(F.text.lower().startswith("–∫—Ä–∞—à"))
async def crash_game(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    balance = get_balance(user_id)

    try:
        parts = message.text.lower().replace(",", ".").split()
        if len(parts) != 3:
            await message.answer("–ü—Ä–∏–º–µ—Ä: –∫—Ä–∞—à 2.5 100")
            return

        if balance < 10:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 10$")
            return

        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        try:
            coef = float(parts[1])
            if coef < 1.01 or coef > 1_000_000:
                await message.answer("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1.01 –¥–æ 1.000.000")
                return
        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç. –ü—Ä–∏–º–µ—Ä: 2.5")
            return

        # –°—É–º–º–∞
        amount_str = parts[2].replace("—ë", "–µ")
        if amount_str == "–≤—Å–µ":
            amount = balance
        else:
            amount = parse_k(amount_str, balance)

        if amount is None or amount < 10:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 10$")
            return

        if amount > balance:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return

        crash_coef = generate_crash_coef()

        win = coef <= crash_coef
        update_balance(user_id, balance - amount)

        if win:
            win_amount = round_amount(amount * coef)
            update_balance(user_id, get_balance(user_id) + win_amount)
            result_message = (
                f"{name}\n"
                f"–ö—Ä–∞—à –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞: x{crash_coef}\n"
                f"–í–∞—à –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{coef}\n"
                f"üéâ –ü–æ–±–µ–¥–∞! –í–∞—à –ø—Ä–∏–∑: +{format_amount(win_amount - amount)}$\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(get_balance(user_id))}$"
            )
        else:
            result_message = (
                f"{name}\n"
                f"–ö—Ä–∞—à –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞: x{crash_coef}\n"
                f"–í–∞—à –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{coef}\n"
                f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {format_amount(amount)}$ (x{coef})\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(get_balance(user_id))}$"
            )

        repeat_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞–≤–∫—É",
                        callback_data=f"repeat_crash:{coef}:{amount}"
                    )
                ]
            ]
        )
        await message.answer(result_message, reply_markup=repeat_kb)

    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏", reply_markup=menu_kb)
        
        
        
@router.callback_query(F.data.startswith("repeat_crash"))
async def handle_repeat_crash(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    try:
        _, coef_str, amount_str = callback.data.split(":")
        coef = float(coef_str)
        balance = get_balance(user_id)
        # amount_str –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º, –¥—Ä–æ–±—å—é –∏–ª–∏ "–≤—Å–µ"
        if amount_str.lower() in ["–≤—Å–µ", "–≤—Å—ë", "all"]:
            amount = balance
        else:
            amount = parse_k(amount_str, balance)
        if amount is None or amount < 10:
            await callback.message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 10$")
            await callback.answer()
            return
        if amount > balance:
            await callback.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            await callback.answer()
            return
        crash_coef = generate_crash_coef()
        win = coef <= crash_coef
        update_balance(user_id, balance - amount)
        if win:
            win_amount = round_amount(amount * coef)
            update_balance(user_id, get_balance(user_id) + win_amount)
            result_message = (
                f"{name}\n"
                f"–ö—Ä–∞—à –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞: x{crash_coef}\n"
                f"–í–∞—à –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{coef}\n"
                f"üéâ –ü–æ–±–µ–¥–∞! –í–∞—à –ø—Ä–∏–∑: +{format_amount(win_amount - amount)}$\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(get_balance(user_id))}$"
            )
        else:
            result_message = (
                f"{name}\n"
                f"–ö—Ä–∞—à –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞: x{crash_coef}\n"
                f"–í–∞—à –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{coef}\n"
                f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {format_amount(amount)}$ (x{coef})\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(get_balance(user_id))}$"
            )
        repeat_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞–≤–∫—É",
                        callback_data=f"repeat_crash:{coef}:{amount_str}"
                    )
                ]
            ]
        )
        await callback.message.answer(result_message, reply_markup=repeat_kb)
    except Exception:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ —Å—Ç–∞–≤–∫–∏")
    await callback.answer()
    
    
def get_next_coin_game_id():
    if coin_games:
        return max(coin_games.keys()) + 1
    return 1

@router.message(F.text.lower().startswith("–º–æ–Ω–µ—Ç–∫–∞"))
async def coin_create_or_accept(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    clickable = user.get("clickable_name", True)
    chat_id = message.chat.id
    parts = message.text.lower().split()
    
    if (
        len(parts) == 3
        and parts[1] in ["—É–¥–∞–ª–∏—Ç—å", "–æ—Ç–º–µ–Ω–∞", "cancel", "delete"]
        and parts[2].isdigit()
    ):
        game_id = int(parts[2])
        game = coin_games.get(game_id)
        if not game:
            await message.answer(f"‚ùå –ò–≥—Ä–∞ ‚Ññ{game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")
            return
        if game["status"] != "waiting":
            await message.answer(f"‚ùå –ò–≥—Ä–∞ ‚Ññ{game_id} —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", parse_mode="HTML")
            return
        if game["creator_id"] != user_id:
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∏–≥—Ä—É.", parse_mode="HTML")
            return
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É
        update_balance(user_id, get_balance(user_id) + game["amount"])
        save_user_data()
        del coin_games[game_id]
        save_coin_games()
        await message.answer(f"‚úÖ –ò–≥—Ä–∞ –º–æ–Ω–µ—Ç–∫–∞ ‚Ññ{game_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞, —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.", parse_mode="HTML")
        return
    
    if len(parts) == 1:
        # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
        if not coin_games:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –º–æ–Ω–µ—Ç–∫–∞.", parse_mode="HTML")
            return
        text = "<b>üé≤ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –º–æ–Ω–µ—Ç–∫–∞:</b>\n\n"
        for gid, game in coin_games.items():
            if game["status"] == "waiting":
                text += (
                    f"‚Ññ{gid}: {clickable_name(game['creator_id'], game['creator_name'], True)} ‚Äî "
                    f"{game['choice'].capitalize()}, —Å—Ç–∞–≤–∫–∞: <b>{format_amount(game['amount'])}$</b>\n"
                )
        await message.answer(text, parse_mode="HTML")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
    if len(parts) == 3 and parts[1] in ["–æ—Ä–µ–ª", "–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞"]:
        choice = "–æ—Ä–µ–ª" if parts[1] in ["–æ—Ä–µ–ª", "–æ—Ä—ë–ª"] else "—Ä–µ—à–∫–∞"
        amount_text = parts[2]
        balance = get_balance(user_id)
        if amount_text in ["–≤—Å–µ", "–≤—Å—ë", "all"]:
            amount = balance
        else:
            amount = parse_k(amount_text, balance)
        if amount is None or amount <= 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.", parse_mode="HTML")
            return
        if balance < amount:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.", parse_mode="HTML")
            return
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        update_balance(user_id, balance - amount)
        save_user_data()
        game_id = get_next_coin_game_id()
        coin_games[game_id] = {
            "creator_id": user_id,
            "creator_name": name,
            "choice": choice,
            "amount": amount,
            "status": "waiting",
            "opponent_id": None,
            "chat_id": chat_id,  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç, –≥–¥–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–≥—Ä–∞
        }
        save_coin_games()
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üéÆ –ü—Ä–∏–Ω—è—Ç—å –∏–≥—Ä—É", callback_data=f"coin_accept:{game_id}")],
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä", callback_data="coin_list")]
            ]
        )
        await message.answer(
            f"{clickable_name(user_id, name, clickable)} —Å—Ç–∞–≤–∫–∞ –≤ {format_amount(amount)}$ –Ω–∞ {choice.capitalize()} —Å–¥–µ–ª–∞–Ω–∞ (‚Ññ{game_id})\n"
            f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞",
            reply_markup=kb,
            parse_mode="HTML"
        )
        return

    # –ü—Ä–∏–Ω—è—Ç–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É
    if len(parts) == 2 and parts[1].isdigit():
        game_id = int(parts[1])
        game = coin_games.get(game_id)
        if not game or game["status"] != "waiting":
            await message.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞.", parse_mode="HTML")
            return
        if user_id == game["creator_id"]:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ—é –∂–µ –∏–≥—Ä—É.", parse_mode="HTML")
            return
        if get_balance(user_id) < game["amount"]:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.", parse_mode="HTML")
            return
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        update_balance(user_id, get_balance(user_id) - game["amount"])
        save_user_data()
        game["status"] = "playing"
        game["opponent_id"] = user_id
        game["opponent_name"] = name
        # –†–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É —á–µ—Å—Ç–Ω–æ
        import random
        result = random.choice(["–æ—Ä–µ–ª", "—Ä–µ—à–∫–∞"])
        if result == game["choice"]:
            winner_id = game["creator_id"]
            loser_id = user_id
        else:
            winner_id = user_id
            loser_id = game["creator_id"]
        win_amount = game["amount"] * 2
        update_balance(winner_id, get_balance(winner_id) + win_amount)
        save_user_data()
        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
        chat_id = game.get("chat_id")
        del coin_games[game_id]
        save_coin_games()
        winner_name = get_user(winner_id).get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        loser_name = get_user(loser_id).get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        winner_balance = get_balance(winner_id)
        loser_balance = get_balance(loser_id)
        winner_text = (
            f"–í—ã–ø–∞–ª–∞ ¬´{result.capitalize()}¬ª [üîò] üëçüèª\n"
            f"üí∏ –ü—Ä–∏–∑: {format_amount(win_amount)}$\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(winner_balance)}$"
        )
        loser_text = (
            f"–í—ã–ø–∞–ª–∞ ¬´{result.capitalize()}¬ª [üîò] üëéüèª\n"
            f"üí∏ –ü—Ä–∏–∑: 0$\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(loser_balance)}$"
        )
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º –≤ –ª–∏—á–∫—É
        try:
            await bot.send_message(winner_id, winner_text, parse_mode="HTML")
        except Exception:
            pass
        try:
            await bot.send_message(loser_id, loser_text, parse_mode="HTML")
        except Exception:
            pass
        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–µ –≤ –ª–∏—á–∫–µ
        if chat_id and chat_id != user_id:
            try:
                await bot.send_message(chat_id, winner_text, parse_mode="HTML")
            except Exception:
                pass
        return

    await message.answer(
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
        "–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É: <code>–º–æ–Ω–µ—Ç–∫–∞ –æ—Ä–µ–ª 1000</code> –∏–ª–∏ <code>–º–æ–Ω–µ—Ç–∫–∞ —Ä–µ—à–∫–∞ –≤—Å–µ</code>\n"
        "–ü—Ä–∏–Ω—è—Ç—å –∏–≥—Ä—É: <code>–º–æ–Ω–µ—Ç–∫–∞ 1</code>\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫: <code>–º–æ–Ω–µ—Ç–∫–∞</code>",
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("coin_accept:"))
async def coin_accept_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    name = user.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    game_id = int(callback.data.split(":")[1])
    game = coin_games.get(game_id)
    if not game or game["status"] != "waiting":
        await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞.", show_alert=True)
        return
    if user_id == game["creator_id"]:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ—é –∂–µ –∏–≥—Ä—É.", show_alert=True)
        return
    if get_balance(user_id) < game["amount"]:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.", show_alert=True)
        return
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    update_balance(user_id, get_balance(user_id) - game["amount"])
    save_user_data()
    game["status"] = "playing"
    game["opponent_id"] = user_id
    game["opponent_name"] = name
    # –†–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É —á–µ—Å—Ç–Ω–æ
    import random
    result = random.choice(["–æ—Ä–µ–ª", "—Ä–µ—à–∫–∞"])
    if result == game["choice"]:
        winner_id = game["creator_id"]
        loser_id = user_id
    else:
        winner_id = user_id
        loser_id = game["creator_id"]
    win_amount = game["amount"] * 2
    update_balance(winner_id, get_balance(winner_id) + win_amount)
    save_user_data()
    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
    chat_id = game.get("chat_id")
    del coin_games[game_id]
    save_coin_games()
    winner_name = get_user(winner_id).get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    loser_name = get_user(loser_id).get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
    winner_balance = get_balance(winner_id)
    loser_balance = get_balance(loser_id)
    winner_text = (
        f"–í—ã–ø–∞–ª–∞ ¬´{result.capitalize()}¬ª [üîò] üëçüèª\n"
        f"üí∏ –ü—Ä–∏–∑: {format_amount(win_amount)}$\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(winner_balance)}$"
    )
    loser_text = (
        f"–í—ã–ø–∞–ª–∞ ¬´{result.capitalize()}¬ª [üîò] üëéüèª\n"
        f"üí∏ –ü—Ä–∏–∑: 0$\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(loser_balance)}$"
    )
    try:
        await bot.send_message(winner_id, winner_text, parse_mode="HTML")
    except Exception:
        pass
    try:
        await bot.send_message(loser_id, loser_text, parse_mode="HTML")
    except Exception:
        pass
    if chat_id and chat_id != user_id:
        try:
            await bot.send_message(chat_id, winner_text, parse_mode="HTML")
        except Exception:
            pass
    await callback.answer("–ò–≥—Ä–∞ —Å—ã–≥—Ä–∞–Ω–∞!", show_alert=True)

@router.callback_query(F.data == "coin_list")
async def coin_list_callback(callback: CallbackQuery):
    if not coin_games:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –º–æ–Ω–µ—Ç–∫–∞.", parse_mode="HTML")
        await callback.answer()
        return
    text = "<b>üé≤ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –º–æ–Ω–µ—Ç–∫–∞:</b>\n\n"
    for gid, game in coin_games.items():
        if game["status"] == "waiting":
            text += (
                f"‚Ññ{gid}: {clickable_name(game['creator_id'], game['creator_name'], True)} ‚Äî "
                f"{game['choice'].capitalize()}, —Å—Ç–∞–≤–∫–∞: <b>{format_amount(game['amount'])}$</b>\n" 
            )
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()