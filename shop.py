from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from utils import get_user, get_balance, update_balance, save_user_data

router = Router()

EMOJI_NUMBERS = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]

ASSET_EMOJIS = {
    "cars": "üöó",
    "flats": "üè¢",
    "houses": "üè†",
    "planes": "‚úàÔ∏è",
    "helicopters": "üöÅ",
    "smartphones": "üì±",
    "watches": "‚åö",
}

SELL_SYNONYMS = {
    "cars": ["–º–∞—à–∏–Ω–∞", "–º–∞—à–∏–Ω—É", "–∞–≤—Ç–æ–º–æ–±–∏–ª—å", "–∞–≤—Ç–æ", "—Ç–∞—á–∫–∞", "—Ç–∞—á–∫—É", "–º–∞—à–∏–Ω—ã"],
    "flats": ["–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–∫–≤–∞—Ä—Ç–∏—Ä—É", "–∫–≤–∞—Ä—Ç–∏—Ä—ã", "—Ö–∞—Ç–∞", "—Ö–∞—Ç—É"],
    "houses": ["–¥–æ–º", "–¥–æ–º–∞", "–¥–æ–º–∏–∫", "—Ö–∞—Ç–∞", "—Ö–∞—Ç—É"],
    "planes": ["—Å–∞–º–æ–ª—ë—Ç", "—Å–∞–º–æ–ª–µ—Ç", "—Å–∞–º–æ–ª–µ—Ç—ã", "—Å–∞–º–æ–ª—ë—Ç—ã", "—Å–∞–º–æ–ª—ë—Ç–∏–∫", "—Å–∞–º–æ–ª–µ—Ç–∏–∫"],
    "helicopters": ["–≤–µ—Ä—Ç–æ–ª—ë—Ç", "–≤–µ—Ä—Ç–æ–ª–µ—Ç", "–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã", "–≤–µ—Ä—Ç–æ–ª—ë—Ç—ã", "–≤–µ—Ä—Ç–æ–ª—ë—Ç–∏–∫", "–≤–µ—Ä—Ç–æ–ª–µ—Ç–∏–∫"],
    "smartphones": ["—Ç–µ–ª–µ—Ñ–æ–Ω", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã", "—Ç–µ–ª–µ—Ñ–æ–Ω—ã", "–º–æ–±–∏–ª—å–Ω–∏–∫"],
    "watches": ["—á–∞—Å—ã", "—á–∞—Å–∏–∫–∏", "watch", "watches"],
}

SHOP_ITEMS = {
    "smartphones": [
        {"name": "Nokia 105 (2024)", "price": 900},
        {"name": "Realme C53", "price": 3500},
        {"name": "Samsung Galaxy A15", "price": 6500},
        {"name": "Xiaomi Redmi Note 13", "price": 9000},
        {"name": "Nothing Phone (2a)", "price": 12000},
        {"name": "Google Pixel 8a", "price": 18000},
        {"name": "OnePlus 12R", "price": 22000},
        {"name": "Samsung Galaxy S24 Ultra", "price": 35000},
        {"name": "iPhone 15 Pro Max", "price": 40000},
        {"name": "Xiaomi 14 Ultra", "price": 42000},
    ],
    "cars": [
        {"name": "Lada Granta", "price": 5000},
        {"name": "Kia Rio", "price": 12000},
        {"name": "Volkswagen Polo", "price": 18000},
        {"name": "Hyundai Solaris", "price": 25000},
        {"name": "Toyota Camry", "price": 35000},
        {"name": "BMW 3 Series", "price": 60000},
        {"name": "Mercedes-Benz E-Class", "price": 90000},
        {"name": "Audi A8", "price": 120000},
        {"name": "Porsche 911", "price": 250000},
        {"name": "Lamborghini Revuelto", "price": 400000},
    ],
    "flats": [
        {"name": "–ö–æ–º–Ω–∞—Ç–∞ –≤ –æ–±—â–∞–≥–µ", "price": 3000},
        {"name": "–û–¥–Ω—É—à–∫–∞ –≤ —Ö—Ä—É—â—ë–≤–∫–µ", "price": 8000},
        {"name": "–î–≤—É—à–∫–∞ –≤ –ø–∞–Ω–µ–ª—å–∫–µ", "price": 15000},
        {"name": "–¢—Ä–µ—à–∫–∞ –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ", "price": 30000},
        {"name": "–°—Ç—É–¥–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ", "price": 50000},
        {"name": "–ï–≤—Ä–æ–¥–≤—É—à–∫–∞", "price": 70000},
        {"name": "–≠–ª–∏—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞", "price": 120000},
        {"name": "–ü–µ–Ω—Ç—Ö–∞—É—Å", "price": 250000},
        {"name": "–õ–æ—Ñ—Ç", "price": 400000},
        {"name": "–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã", "price": 600000},
    ],
    "houses": [
        {"name": "–î–∞—á–Ω—ã–π –¥–æ–º–∏–∫", "price": 20000},
        {"name": "–ö–æ—Ç—Ç–µ–¥–∂ –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ", "price": 70000},
        {"name": "–ó–∞–≥–æ—Ä–æ–¥–Ω—ã–π –¥–æ–º", "price": 150000},
        {"name": "–í–∏–ª–ª–∞ –Ω–∞ –º–æ—Ä–µ", "price": 300000},
        {"name": "–û—Å–æ–±–Ω—è–∫", "price": 600000},
        {"name": "–†–µ–∑–∏–¥–µ–Ω—Ü–∏—è", "price": 1200000},
        {"name": "–ó–∞–º–æ–∫", "price": 2500000},
        {"name": "–î–≤–æ—Ä–µ—Ü", "price": 4000000},
        {"name": "–û—Å—Ç—Ä–æ–≤", "price": 12000000},
        {"name": "–°—É–ø–µ—Ä-–æ—Å–æ–±–Ω—è–∫", "price": 30000000},
    ],
    "planes": [
        {"name": "Cessna 172", "price": 20000},
        {"name": "Piper PA-28", "price": 35000},
        {"name": "Beechcraft Baron", "price": 60000},
        {"name": "Pilatus PC-12", "price": 120000},
        {"name": "Embraer Phenom 300", "price": 250000},
        {"name": "Bombardier Challenger 350", "price": 400000},
        {"name": "Gulfstream G650", "price": 700000},
        {"name": "Dassault Falcon 8X", "price": 1200000},
        {"name": "Boeing 737", "price": 2500000},
        {"name": "Airbus A320", "price": 3000000},
    ],
    "helicopters": [
        {"name": "Robinson R44", "price": 9000},
        {"name": "Bell 206", "price": 20000},
        {"name": "Eurocopter EC120", "price": 35000},
        {"name": "AgustaWestland AW109", "price": 60000},
        {"name": "Bell 429", "price": 90000},
        {"name": "Airbus H145", "price": 150000},
        {"name": "Sikorsky S-76", "price": 250000},
        {"name": "AgustaWestland AW139", "price": 400000},
        {"name": "Bell 525 Relentless", "price": 700000},
        {"name": "Airbus H225", "price": 1200000},
    ],
    "watches": [
        {"name": "Casio F-91W", "price": 200},
        {"name": "Swatch Originals", "price": 800},
        {"name": "Seiko 5", "price": 2000},
        {"name": "Citizen Eco-Drive", "price": 3500},
        {"name": "Tissot PRX", "price": 7000},
        {"name": "TAG Heuer Carrera", "price": 20000},
        {"name": "Omega Seamaster", "price": 40000},
        {"name": "Rolex Submariner", "price": 120000},
        {"name": "Audemars Piguet Royal Oak", "price": 300000},
        {"name": "Patek Philippe Nautilus", "price": 600000},
    ],
}

CATEGORY_NAMES = {
    "smartphones": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
    "cars": "–ú–∞—à–∏–Ω—ã",
    "flats": "–ö–≤–∞—Ä—Ç–∏—Ä—ã",
    "houses": "–î–æ–º–∞",
    "planes": "–°–∞–º–æ–ª—ë—Ç—ã",
    "helicopters": "–í–µ—Ä—Ç–æ–ª—ë—Ç—ã",
    "watches": "–ß–∞—Å—ã",
}

def get_shop_main_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöó –ú–∞—à–∏–Ω—ã", callback_data="shop_cars")],
            [InlineKeyboardButton(text="üè¢ –ö–≤–∞—Ä—Ç–∏—Ä—ã", callback_data="shop_flats")],
            [InlineKeyboardButton(text="üè† –î–æ–º–∞", callback_data="shop_houses")],
            [InlineKeyboardButton(text="‚úàÔ∏è –°–∞–º–æ–ª—ë—Ç—ã", callback_data="shop_planes")],
            [InlineKeyboardButton(text="üöÅ –í–µ—Ä—Ç–æ–ª—ë—Ç—ã", callback_data="shop_helicopters")],
            [InlineKeyboardButton(text="üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", callback_data="shop_smartphones")],
            [InlineKeyboardButton(text="‚åö –ß–∞—Å—ã", callback_data="shop_watches")],
        ]
    )

def get_shop_items_kb(category):
    # 10 –∫–Ω–æ–ø–æ–∫ –≤ 2 —Ä—è–¥–∞ –ø–æ 5, —Å —ç–º–æ–¥–∑–∏-—Ü–∏—Ñ—Ä–∞–º–∏
    buttons = [
        InlineKeyboardButton(text=EMOJI_NUMBERS[i], callback_data=f"buy_{category}_{i}")
        for i in range(10)
    ]
    return InlineKeyboardMarkup(
        inline_keyboard=[
            buttons[:5],
            buttons[5:],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_main")]
        ]
    )

@router.message(F.text.lower().in_(["–º–∞–≥–∞–∑–∏–Ω", "shop", "üõí –º–∞–≥–∞–∑–∏–Ω", '–º–∞–≥–∞–∑']))
async def show_shop_menu(message: Message):
    await message.answer("üõí –ú–∞–≥–∞–∑–∏–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_shop_main_kb())

@router.callback_query(F.data.startswith("shop_"))
async def show_shop_category(callback: CallbackQuery):
    category = callback.data.replace("shop_", "")
    if category == "main":
        await callback.message.edit_text("üõí –ú–∞–≥–∞–∑–∏–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_shop_main_kb())
        await callback.answer()
        return
    items = SHOP_ITEMS.get(category)
    if not items:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    text = f"üì¶ {CATEGORY_NAMES.get(category, category).capitalize()}:\n\n"
    for i, item in enumerate(items):
        text += f"{EMOJI_NUMBERS[i]} {item['name']} ‚Äî {item['price']}$\n"
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
    await callback.message.edit_text(text, reply_markup=get_shop_items_kb(category))
    await callback.answer()

@router.callback_query(F.data.startswith("buy_"))
async def buy_shop_item(callback: CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split("_")
    category = parts[1]
    idx = int(parts[2])
    item = SHOP_ITEMS[category][idx]
    user = get_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    if user.get(category):
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç! –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—ã–π.\n–ö–æ–º–∞–Ω–¥–∞: –ü—Ä–æ–¥–∞—Ç—å (–ø—Ä–µ–¥–º–µ—Ç)\n–ü—Ä–∏–º–µ—Ä –ü—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω–∞", show_alert=True)
        return

    balance = get_balance(user_id)
    if balance < item["price"]:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
        return

    # –ü–æ–∫—É–ø–∫–∞
    update_balance(user_id, balance - item["price"])
    user[category] = item["name"]
    save_user_data()
    await callback.message.edit_text(f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {item['name']} –∑–∞ {item['price']}$!", reply_markup=get_shop_main_kb())
    await callback.answer()

@router.message(F.text.lower().startswith("–ø—Ä–æ–¥–∞—Ç—å "))
async def sell_item(message: Message):
    user_id = message.from_user.id
    parts = message.text.lower().split()
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, `–ø—Ä–æ–¥–∞—Ç—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω`).")
        return
    word = parts[1]
    category = find_category_by_synonym(word)
    if not category:
        # fallback: —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
        if word.endswith("—ã") or word.endswith("–∏"):
            category = word[:-1] + "s"
        else:
            category = word
    user = get_user(user_id)
    item_name = user.get(category)
    if not item_name:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.")
        return
    price = next((item["price"] for item in SHOP_ITEMS[category] if item["name"] == item_name), None)
    if not price:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ.")
        return
    sell_price = int(price * 0.6)
    update_balance(user_id, get_balance(user_id) + sell_price)
    user[category] = None
    save_user_data()
    await message.answer(f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {item_name} –∑–∞ {sell_price}$!")

def get_assets_text(user):
    assets = []
    for cat in SHOP_ITEMS.keys():
        if user.get(cat):
            emoji = ASSET_EMOJIS.get(cat, "")
            assets.append(f"{emoji}: {user[cat]}")
    return "\n".join(assets) if assets else "–ù–µ—Ç –∏–º—É—â–µ—Å—Ç–≤–∞"

def find_category_by_synonym(word):
    for cat, synonyms in SELL_SYNONYMS.items():
        if word in synonyms:
            return cat
    return None

